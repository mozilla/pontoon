# -*- coding: utf-8 -*-
# Generated by Django 1.11.28 on 2020-03-08 22:57
import re

import django.contrib.postgres.fields
import django.contrib.postgres.operations
import django.core.validators
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import partial_index

import pontoon.db.migrations

from bulk_update.helper import bulk_update
from django.conf import settings
from django.db import connection, migrations, models, ProgrammingError

from pontoon.base.models import get_word_count


MIGRATION_0002_LOCALES = [
    {"code": "af", "name": "Afrikaans", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "af-ZA", "name": "Afrikaans"},
    {"code": "ak", "name": "Akan", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "sq", "name": "Albanian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "sq-AL", "name": "Albanian"},
    {"code": "aln", "name": "Albanian Gheg"},
    {"code": "am", "name": "Amharic", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "am-ET", "name": "Amharic"},
    {
        "code": "ar",
        "name": "Arabic",
        "nplurals": "6",
        "plural_rule": "(n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5)",
    },
    {"code": "ar-SA", "name": "Arabic"},
    {"code": "an", "name": "Aragonese", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "hy", "name": "Armenian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "hy-AM", "name": "Armenian"},
    {"code": "as", "name": "Assamese"},
    {"code": "as-IN", "name": "Assamese"},
    {"code": "ast", "name": "Asturian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "az", "name": "Azerbaijani", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "az-AZ", "name": "Azerbaijani"},
    {"code": "bal", "name": "Balochi"},
    {"code": "eu", "name": "Basque", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "eu-ES", "name": "Basque"},
    {
        "code": "be",
        "name": "Belarusian",
        "nplurals": "3",
        "plural_rule": "(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)",
    },
    {"code": "be-BY", "name": "Belarusian"},
    {"code": "be@tarask", "name": "Belarusian"},
    {"code": "bn", "name": "Bengali", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "bn-BD", "name": "Bengali", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "bn-IN", "name": "Bengali", "nplurals": "2", "plural_rule": "(n != 1)"},
    {
        "code": "bs",
        "name": "Bosnian",
        "nplurals": "3",
        "plural_rule": "(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)",
    },
    {"code": "bs-BA", "name": "Bosnian"},
    {"code": "br", "name": "Breton", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "bg", "name": "Bulgarian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "bg-BG", "name": "Bulgarian"},
    {"code": "my", "name": "Burmese", "nplurals": "1", "plural_rule": "0"},
    {"code": "my-MM", "name": "Burmese"},
    {"code": "ca", "name": "Catalan", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ca-ES", "name": "Catalan"},
    {"code": "ca@valencia", "name": "Catalan"},
    {
        "code": "hne",
        "name": "Chhattisgarhi",
        "nplurals": "2",
        "plural_rule": "(n != 1)",
    },
    {"code": "zh", "name": "Chinese", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "zh-CN", "name": "Chinese", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "zh-CN.GB2312", "name": "Chinese"},
    {"code": "zh-HK", "name": "Chinese", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "zh-TW", "name": "Chinese", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "zh-TW.Big5", "name": "Chinese"},
    {
        "code": "kw",
        "name": "Cornish",
        "nplurals": "4",
        "plural_rule": "(n==1) ? 0 : (n==2) ? 1 : (n == 3) ? 2 : 3",
    },
    {"code": "crh", "name": "Crimean Turkish"},
    {
        "code": "hr",
        "name": "Croatian",
        "nplurals": "3",
        "plural_rule": "(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)",
    },
    {"code": "hr-HR", "name": "Croatian"},
    {
        "code": "cs",
        "name": "Czech",
        "nplurals": "3",
        "plural_rule": "(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2",
    },
    {"code": "cs-CZ", "name": "Czech"},
    {"code": "da", "name": "Danish", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "da-DK", "name": "Danish"},
    {"code": "nl", "name": "Dutch", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "nl-BE", "name": "Dutch"},
    {"code": "nl-NL", "name": "Dutch"},
    {"code": "dz", "name": "Dzongkha", "nplurals": "1", "plural_rule": "0"},
    {"code": "dz-BT", "name": "Dzongkha"},
    {"code": "en", "name": "English", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "en-AU", "name": "English", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "en-CA", "name": "English", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "en-IE", "name": "English", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "en-ZA", "name": "English", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "en-GB", "name": "English", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "en-US", "name": "English", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "eo", "name": "Esperanto", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "et", "name": "Estonian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "et-EE", "name": "Estonian"},
    {"code": "fo", "name": "Faroese", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "fo-FO", "name": "Faroese"},
    {"code": "fil", "name": "Filipino", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "fi", "name": "Finnish", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "fi-FI", "name": "Finnish"},
    {"code": "frp", "name": "Franco-ProvenÃ§al"},
    {"code": "fr", "name": "French", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "fr-CA", "name": "French"},
    {"code": "fr-FR", "name": "French"},
    {"code": "fr-CH", "name": "French"},
    {"code": "fur", "name": "Friulian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ff", "name": "Fulah", "nplurals": "2", "plural_rule": "(n != 1)"},
    {
        "code": "gd",
        "name": "Gaelic, Scottish",
        "nplurals": "4",
        "plural_rule": "(n==1 || n==11) ? 0 : (n==2 || n==12) ? 1 : (n > 2 && n < 20) ? 2 : 3",
    },
    {"code": "gl", "name": "Galician", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "gl-ES", "name": "Galician"},
    {"code": "ka", "name": "Georgian", "nplurals": "1", "plural_rule": "0"},
    {"code": "ka-GE", "name": "Georgian"},
    {"code": "de", "name": "German", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "de-DE", "name": "German"},
    {"code": "de-CH", "name": "German"},
    {"code": "el", "name": "Greek", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "el-GR", "name": "Greek"},
    {"code": "gu", "name": "Gujarati", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "gu-IN", "name": "Gujarati", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "gun", "name": "Gun", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "ht", "name": "Haitian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ht-HT", "name": "Haitian"},
    {"code": "ha", "name": "Hausa", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "he", "name": "Hebrew", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "he-IL", "name": "Hebrew"},
    {"code": "hi", "name": "Hindi", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "hi-IN", "name": "Hindi", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "hu", "name": "Hungarian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "hu-HU", "name": "Hungarian"},
    {
        "code": "is",
        "name": "Icelandic",
        "nplurals": "2",
        "plural_rule": "(n%10!=1 || n%100==11)",
    },
    {"code": "is-IS", "name": "Icelandic"},
    {"code": "ig", "name": "Igbo"},
    {"code": "ilo", "name": "Iloko"},
    {"code": "id", "name": "Indonesian", "nplurals": "1", "plural_rule": "0"},
    {"code": "id-ID", "name": "Indonesian"},
    {"code": "ia", "name": "Interlingua", "nplurals": "2", "plural_rule": "(n != 1)"},
    {
        "code": "ga",
        "name": "Irish",
        "nplurals": "5",
        "plural_rule": "n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4",
    },
    {"code": "ga-IE", "name": "Irish"},
    {"code": "it", "name": "Italian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "it-IT", "name": "Italian"},
    {"code": "ja", "name": "Japanese", "nplurals": "1", "plural_rule": "0"},
    {"code": "ja-JP", "name": "Japanese"},
    {"code": "jv", "name": "Javanese", "nplurals": "2", "plural_rule": "(n != 0)"},
    {"code": "kn", "name": "Kannada", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "kn-IN", "name": "Kannada"},
    {"code": "ks", "name": "Kashmiri"},
    {"code": "ks-IN", "name": "Kashmiri"},
    {
        "code": "csb",
        "name": "Kashubian",
        "nplurals": "3",
        "plural_rule": "(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)",
    },
    {"code": "kk", "name": "Kazakh", "nplurals": "1", "plural_rule": "0"},
    {"code": "kk-KZ", "name": "Kazakh"},
    {"code": "km", "name": "Khmer", "nplurals": "1", "plural_rule": "0"},
    {"code": "km-KH", "name": "Khmer"},
    {"code": "rw", "name": "Kinyarwanda", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ky", "name": "Kirgyz", "nplurals": "1", "plural_rule": "0"},
    {"code": "tlh", "name": "Klingon"},
    {"code": "ko", "name": "Korean", "nplurals": "1", "plural_rule": "0"},
    {"code": "ko-KR", "name": "Korean"},
    {"code": "ku", "name": "Kurdish", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ku-IQ", "name": "Kurdish"},
    {"code": "lo", "name": "Lao", "nplurals": "1", "plural_rule": "0"},
    {"code": "lo-LA", "name": "Lao"},
    {"code": "la", "name": "Latin"},
    {
        "code": "lv",
        "name": "Latvian",
        "nplurals": "3",
        "plural_rule": "(n%10==1 && n%100!=11 ? 0 : n != 0 ? 1 : 2)",
    },
    {"code": "lv-LV", "name": "Latvian"},
    {"code": "lij", "name": "Ligurian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "li", "name": "Limburgian"},
    {"code": "ln", "name": "Lingala", "nplurals": "2", "plural_rule": "(n > 1)"},
    {
        "code": "lt",
        "name": "Lithuanian",
        "nplurals": "3",
        "plural_rule": "(n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 or n%100>=20) ? 1 : 2)",
    },
    {"code": "lt-LT", "name": "Lithuanian"},
    {"code": "nds", "name": "Low German"},
    {"code": "lb", "name": "Luxembourgish", "nplurals": "2", "plural_rule": "(n != 1)"},
    {
        "code": "mk",
        "name": "Macedonian",
        "nplurals": "2",
        "plural_rule": "(n==1 || n%10==1 ? 0 : 1)",
    },
    {"code": "mk-MK", "name": "Macedonian"},
    {"code": "mai", "name": "Maithili", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "mg", "name": "Malagasy", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "ms", "name": "Malay", "nplurals": "1", "plural_rule": "0"},
    {"code": "ml", "name": "Malayalam", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ml-IN", "name": "Malayalam"},
    {"code": "ms-MY", "name": "Malay"},
    {
        "code": "mt",
        "name": "Maltese",
        "nplurals": "4",
        "plural_rule": "(n==1 ? 0 : n==0 || ( n%100>1 && n%100<11) ? 1 : (n%100>10 && n%100<20 ) ? 2 : 3)",
    },
    {"code": "mt-MT", "name": "Maltese"},
    {"code": "mi", "name": "Maori", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "arn", "name": "Mapudungun", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "mr", "name": "Marathi", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "mr-IN", "name": "Marathi"},
    {"code": "mn", "name": "Mongolian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "mn-MN", "name": "Mongolian"},
    {"code": "nah", "name": "Nahuatl", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "nr", "name": "Ndebele, South"},
    {"code": "nap", "name": "Neapolitan", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ne", "name": "Nepali", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ne-NP", "name": "Nepali"},
    {"code": "se", "name": "Northern Sami", "nplurals": "2", "plural_rule": "(n != 1)"},
    {
        "code": "nso",
        "name": "Northern Sotho",
        "nplurals": "2",
        "plural_rule": "(n != 1)",
    },
    {"code": "no", "name": "Norwegian", "nplurals": "2", "plural_rule": "(n != 1)"},
    {
        "code": "nb",
        "name": "Norwegian BokmÃ¥l",
        "nplurals": "2",
        "plural_rule": "(n != 1)",
    },
    {"code": "nb-NO", "name": "Norwegian BokmÃ¥l"},
    {"code": "no-NO", "name": "Norwegian"},
    {
        "code": "nn",
        "name": "Norwegian Nynorsk",
        "nplurals": "2",
        "plural_rule": "(n != 1)",
    },
    {"code": "nn-NO", "name": "Norwegian Nynorsk"},
    {"code": "oc", "name": "Occitan", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "or", "name": "Oriya", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "or-IN", "name": "Oriya"},
    {"code": "pa", "name": "Panjabi", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "pa-IN", "name": "Panjabi"},
    {"code": "pap", "name": "Papiamento", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "fa", "name": "Persian", "nplurals": "1", "plural_rule": "0"},
    {"code": "fa-IR", "name": "Persian"},
    {"code": "pms", "name": "Piemontese", "nplurals": "2", "plural_rule": "(n != 1)"},
    {
        "code": "pl",
        "name": "Polish",
        "nplurals": "3",
        "plural_rule": "(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)",
    },
    {"code": "pl-PL", "name": "Polish"},
    {"code": "pt", "name": "Portuguese", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "pt-BR", "name": "Portuguese", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "pt-PT", "name": "Portuguese"},
    {"code": "ps", "name": "Pushto", "nplurals": "2", "plural_rule": "(n != 1)"},
    {
        "code": "ro",
        "name": "Romanian",
        "nplurals": "3",
        "plural_rule": "(n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2)",
    },
    {"code": "ro-RO", "name": "Romanian"},
    {"code": "rm", "name": "Romansh", "nplurals": "2", "plural_rule": "(n != 1)"},
    {
        "code": "ru",
        "name": "Russian",
        "nplurals": "3",
        "plural_rule": "(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)",
    },
    {"code": "ru-RU", "name": "Russian"},
    {"code": "sm", "name": "Samoan"},
    {"code": "sc", "name": "Sardinian"},
    {"code": "sco", "name": "Scots", "nplurals": "2", "plural_rule": "(n != 1)"},
    {
        "code": "sr",
        "name": "Serbian",
        "nplurals": "3",
        "plural_rule": "(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)",
    },
    {
        "code": "sr@latin",
        "name": "Serbian",
        "nplurals": "3",
        "plural_rule": "(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)",
    },
    {"code": "sr-RS@latin", "name": "Serbian"},
    {"code": "sr-RS", "name": "Serbian"},
    {"code": "sn", "name": "Shona"},
    {"code": "si", "name": "Sinhala", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "si-LK", "name": "Sinhala"},
    {
        "code": "sk",
        "name": "Slovak",
        "nplurals": "3",
        "plural_rule": "(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2",
    },
    {"code": "sk-SK", "name": "Slovak"},
    {
        "code": "sl",
        "name": "Slovenian",
        "nplurals": "4",
        "plural_rule": "(n%100==1 ? 0 : n%100==2 ? 1 : n%100==3 || n%100==4 ? 2 : 3)",
    },
    {
        "code": "sl-SI",
        "name": "Slovenian",
        "nplurals": "4",
        "plural_rule": "(n%100==1 ? 0 : n%100==2 ? 1 : n%100==3 || n%100==4 ? 2 : 3)",
    },
    {"code": "so", "name": "Somali", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "son", "name": "Songhay", "nplurals": "2", "plural_rule": "(n != 1)"},
    {
        "code": "st",
        "name": "Sotho, Southern",
        "nplurals": "2",
        "plural_rule": "(n != 1)",
    },
    {"code": "st-ZA", "name": "Sotho, Southern"},
    {"code": "es-AR", "name": "Spanish", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "es-BO", "name": "Spanish"},
    {"code": "es", "name": "Spanish", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "es-CL", "name": "Spanish", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "es-CO", "name": "Spanish"},
    {"code": "es-CR", "name": "Spanish"},
    {"code": "es-DO", "name": "Spanish"},
    {"code": "es-EC", "name": "Spanish"},
    {"code": "es-SV", "name": "Spanish"},
    {"code": "es-MX", "name": "Spanish", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "es-NI", "name": "Spanish"},
    {"code": "es-PA", "name": "Spanish"},
    {"code": "es-PY", "name": "Spanish"},
    {"code": "es-PE", "name": "Spanish"},
    {"code": "es-PR", "name": "Spanish"},
    {"code": "es-ES", "name": "Spanish"},
    {"code": "es-UY", "name": "Spanish"},
    {"code": "es-VE", "name": "Spanish"},
    {"code": "su", "name": "Sundanese", "nplurals": "1", "plural_rule": "0"},
    {"code": "sw", "name": "Swahili", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "sw-KE", "name": "Swahili"},
    {"code": "sv", "name": "Swedish", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "sv-FI", "name": "Swedish"},
    {"code": "sv-SE", "name": "Swedish", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "tl", "name": "Tagalog"},
    {"code": "tl-PH", "name": "Tagalog"},
    {"code": "tg", "name": "Tajik", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "tg-TJ", "name": "Tajik"},
    {"code": "ta", "name": "Tamil", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ta-IN", "name": "Tamil", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ta-LK", "name": "Tamil"},
    {"code": "tt", "name": "Tatar", "nplurals": "1", "plural_rule": "0"},
    {"code": "te", "name": "Telugu", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "te-IN", "name": "Telugu"},
    {"code": "th", "name": "Thai", "nplurals": "1", "plural_rule": "0"},
    {"code": "th-TH", "name": "Thai"},
    {"code": "bo", "name": "Tibetan", "nplurals": "1", "plural_rule": "0"},
    {"code": "bo-CN", "name": "Tibetan"},
    {"code": "ti", "name": "Tigrinya", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "to", "name": "Tongan"},
    {"code": "tr", "name": "Turkish", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "tr-TR", "name": "Turkish"},
    {"code": "tk", "name": "Turkmen", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ug", "name": "Uighur", "nplurals": "1", "plural_rule": "0"},
    {
        "code": "uk",
        "name": "Ukrainian",
        "nplurals": "3",
        "plural_rule": "(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)",
    },
    {"code": "uk-UA", "name": "Ukrainian"},
    {
        "code": "hsb",
        "name": "Upper Sorbian",
        "nplurals": "4",
        "plural_rule": "(n%100==1 ? 0 : n%100==2 ? 1 : n%100==3 || n%100==4 ? 2 : 3)",
    },
    {"code": "ur", "name": "Urdu", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "ur-PK", "name": "Urdu"},
    {"code": "uz", "name": "Uzbek", "nplurals": "2", "plural_rule": "(n > 1)"},
    {"code": "ve", "name": "Venda"},
    {"code": "vi", "name": "Vietnamese", "nplurals": "1", "plural_rule": "0"},
    {"code": "vi-VN", "name": "Vietnamese"},
    {"code": "vls", "name": "Vlaams"},
    {"code": "wa", "name": "Walloon", "nplurals": "2", "plural_rule": "(n > 1)"},
    {
        "code": "cy",
        "name": "Welsh",
        "nplurals": "4",
        "plural_rule": "(n==1) ? 0 : (n==2) ? 1 : (n != 8 && n != 11) ? 2 : 3",
    },
    {"code": "cy-GB", "name": "Welsh"},
    {
        "code": "fy",
        "name": "Western Frisian",
        "nplurals": "2",
        "plural_rule": "(n != 1)",
    },
    {"code": "fy-NL", "name": "Western Frisian"},
    {"code": "wo", "name": "Wolof", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "wo-SN", "name": "Wolof"},
    {"code": "xh", "name": "Xhosa", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "yi", "name": "Yiddish"},
    {"code": "yo", "name": "Yoruba", "nplurals": "2", "plural_rule": "(n != 1)"},
    {"code": "zu", "name": "Zulu"},
    {"code": "zu-ZA", "name": "Zulu"},
    {
        "code": "dsb",
        "name": "Lower Sorbian",
        "nplurals": "4",
        "plural_rule": "(n%100==1 ? 0 : n%100==2 ? 1 : n%100==3 || n%100==4 ? 2 : 3)",
    },
]

MIGRATION_0008_LOCALE_CLDR = {
    "af": "1,5",
    "ak": "1,5",
    "sq": "1,5",
    "am": "1,5",
    "ar": "0,1,2,3,4,5",
    "an": "1,5",
    "hy": "1,5",
    "ast": "1,5",
    "az": "1,5",
    "eu": "1,5",
    "be": "1,3,5",
    "bn": "1,5",
    "bn-BD": "1,5",
    "bn-IN": "1,5",
    "bs": "1,3,5",
    "br": "1,5",
    "bg": "1,5",
    "my": "5",
    "ca": "1,5",
    "hne": "1,5",
    "zh": "1,5",
    "zh-CN": "1,5",
    "zh-HK": "1,5",
    "zh-TW": "1,5",
    "kw": "1,2,3,5",
    "hr": "1,3,5",
    "cs": "1,3,5",
    "da": "1,5",
    "nl": "1,5",
    "dz": "5",
    "en": "1,5",
    "en-AU": "1,5",
    "en-CA": "1,5",
    "en-IE": "1,5",
    "en-ZA": "1,5",
    "en-GB": "1,5",
    "en-US": "1,5",
    "eo": "1,5",
    "et": "1,5",
    "fo": "1,5",
    "fil": "1,5",
    "fi": "1,5",
    "fr": "1,5",
    "fur": "1,5",
    "ff": "1,5",
    "gd": "1,2,3,5",
    "gl": "1,5",
    "ka": "5",
    "de": "1,5",
    "el": "1,5",
    "gu": "1,5",
    "gu-IN": "1,5",
    "gun": "1,5",
    "ht": "1,5",
    "ha": "1,5",
    "he": "1,5",
    "hi": "1,5",
    "hi-IN": "1,5",
    "hu": "1,5",
    "is": "1,5",
    "id": "5",
    "ia": "1,5",
    "ga": "1,2,3,4,5",
    "it": "1,5",
    "ja": "5",
    "jv": "0,5",
    "kn": "1,5",
    "csb": "1,3,5",
    "kk": "5",
    "km": "5",
    "rw": "1,5",
    "ky": "5",
    "ko": "5",
    "ku": "1,5",
    "lo": "5",
    "lv": "0,1,5",
    "lij": "1,5",
    "ln": "1,5",
    "lt": "1,3,5",
    "lb": "1,5",
    "mk": "1,5",
    "mai": "1,5",
    "mg": "1,5",
    "ms": "5",
    "ml": "1,5",
    "mt": "1,3,4,5",
    "mi": "1,5",
    "arn": "1,5",
    "mr": "1,5",
    "mn": "1,5",
    "nah": "1,5",
    "nap": "1,5",
    "ne": "1,5",
    "se": "1,5",
    "nso": "1,5",
    "no": "1,5",
    "nb": "1,5",
    "nn": "1,5",
    "oc": "1,5",
    "or": "1,5",
    "pa": "1,5",
    "pap": "1,5",
    "fa": "5",
    "pms": "1,5",
    "pl": "1,3,5",
    "pt": "1,5",
    "pt-BR": "1,5",
    "ps": "1,5",
    "ro": "1,3,5",
    "rm": "1,5",
    "ru": "1,3,5",
    "sco": "1,5",
    "sr": "1,3,5",
    "sr@latin": "1,3,5",
    "si": "1,5",
    "sk": "1,3,5",
    "sl": "1,2,3,5",
    "sl-SI": "1,2,3,5",
    "so": "1,5",
    "son": "1,5",
    "st": "1,5",
    "es-AR": "1,5",
    "es": "1,5",
    "es-CL": "1,5",
    "es-MX": "1,5",
    "su": "5",
    "sw": "1,5",
    "sv": "1,5",
    "sv-SE": "1,5",
    "tg": "1,5",
    "ta": "1,5",
    "ta-IN": "1,5",
    "tt": "5",
    "te": "1,5",
    "th": "5",
    "bo": "5",
    "ti": "1,5",
    "tr": "1,5",
    "tk": "1,5",
    "ug": "5",
    "uk": "1,3,5",
    "hsb": "1,2,3,5",
    "ur": "1,5",
    "uz": "1,5",
    "vi": "5",
    "wa": "1,5",
    "cy": "1,2,3,5",
    "fy": "1,5",
    "wo": "1,5",
    "xh": "1,5",
    "yo": "1,5",
    "dsb": "1,2,3,5",
}

MIGRATION_0012_UNUSED_LOCALES = [
    "af-ZA",
    "aln",
    "am",
    "am-ET",
    "ar-SA",
    "arn",
    "as-IN",
    "az-AZ",
    "bal",
    "be-BY",
    "be@tarask",
    "bg-BG",
    "bn",
    "bo",
    "bo-CN",
    "bs-BA",
    "ca-ES",
    "ca@valencia",
    "crh",
    "cs-CZ",
    "cy-GB",
    "da-DK",
    "de-CH",
    "de-DE",
    "dz",
    "dz-BT",
    "el-GR",
    "en",
    "en-AU",
    "en-CA",
    "en-IE",
    "en-US",
    "es-BO",
    "es-CO",
    "es-CR",
    "es-DO",
    "es-EC",
    "es-NI",
    "es-PA",
    "es-PE",
    "es-PR",
    "es-PY",
    "es-SV",
    "es-UY",
    "es-VE",
    "et-EE",
    "eu-ES",
    "fa-IR",
    "fi-FI",
    "fil",
    "fo",
    "fo-FO",
    "fr-CA",
    "fr-CH",
    "fr-FR",
    "frp",
    "gl-ES",
    "gu",
    "gun",
    "ha",
    "he-IL",
    "hi",
    "hne",
    "hr-HR",
    "ht-HT",
    "hu-HU",
    "hy",
    "ia",
    "id-ID",
    "ig",
    "is-IS",
    "it-IT",
    "ja-JP",
    "jv",
    "ka-GE",
    "kk-KZ",
    "km-KH",
    "kn-IN",
    "ko-KR",
    "ks",
    "ks-IN",
    "ku-IQ",
    "kw",
    "ky",
    "la",
    "lb",
    "li",
    "ln",
    "lo",
    "lo-LA",
    "lt-LT",
    "lv-LV",
    "mg",
    "mi",
    "mk-MK",
    "ml-IN",
    "mn-MN",
    "mr-IN",
    "ms-MY",
    "mt",
    "mt-MT",
    "my-MM",
    "nah",
    "nap",
    "nb",
    "nds",
    "ne",
    "nl-BE",
    "nl-NL",
    "nn",
    "no",
    "no-NO",
    "nr",
    "or-IN",
    "pap",
    "pl-PL",
    "pms",
    "ps",
    "ro-RO",
    "ru-RU",
    "rw",
    "sc",
    "sco",
    "se",
    "si-LK",
    "sk-SK",
    "sl-SI",
    "sm",
    "sn",
    "so",
    "sq-AL",
    "sr-RS",
    "sr-RS@latin",
    "sr@latin",
    "st",
    "st-ZA",
    "su",
    "sv",
    "sv-FI",
    "sw-KE",
    "ta-IN",
    "te-IN",
    "tg",
    "tg-TJ",
    "th-TH",
    "ti",
    "tk",
    "tl",
    "tl-PH",
    "tlh",
    "to",
    "tr-TR",
    "tt",
    "ug",
    "uk-UA",
    "ur-PK",
    "ve",
    "vi-VN",
    "vls",
    "wa",
    "wo-SN",
    "yi",
    "yo",
    "zh",
    "zh-CN.GB2312",
    "zh-HK",
    "zh-TW.Big5",
    "zu-ZA",
]

MIGRATION_0020_LOCALES = [
    {"code": "hy-AM", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
    {"code": "as", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
    {"code": "ilo", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
    {
        "code": "ga-IE",
        "plural_rule": "n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4",
        "nplurals": 5,
        "cldr_plurals": "1,2,3,4,5",
    },
    {"code": "ne-NP", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
    {"code": "nb-NO", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
    {"code": "nn-NO", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
    {"code": "pa-IN", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
    {"code": "pt-PT", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
    {"code": "es-ES", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
    {"code": "ta-LK", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
    {"code": "fy-NL", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
    {"code": "zu", "plural_rule": "(n != 1)", "nplurals": 2, "cldr_plurals": "1,5"},
]

MIGRATION_0081_LOCALES = {
    "pa-IN": {"population": 35047600, "script": "GurmukhÄ«"},
    "gd": {"population": 63447, "script": "Latin"},
    "gn": {"population": 5495633, "script": "Latin"},
    "gl": {"population": 3385382, "script": "Latin"},
    "ne-NP": {"population": 13882572, "script": "Devanagari"},
    "en-GB": {"population": 63447318, "script": "Latin"},
    "lg": {"population": 4823221, "script": "Latin"},
    "ln": {"population": 2719180, "script": "Latin"},
    "lo": {"population": 4768963, "script": "Lao"},
    "tr": {"population": 77783465, "script": "Latin"},
    "lv": {"population": 1211893, "script": "Latin"},
    "tl": {"population": 28000000, "script": "Latin"},
    "tsz": {"population": 125000, "script": "Latin"},
    "th": {"population": 54381120, "script": "Thai"},
    "te": {"population": 90122400, "script": "Telugu"},
    "ta": {"population": 78710702, "script": "Tamil"},
    "yo": {"population": 24303116, "script": "Latin"},
    "bn": {"population": 200626440, "script": "Bengali"},
    "bn-BD": {"population": 165578840, "script": "Bengali"},
    "bn-IN": {"population": 35047600, "script": "Bengali"},
    "de": {"population": 107183291, "script": "Latin"},
    "ko": {"population": 74818637, "script": "Korean"},
    "da": {"population": 6818223, "script": "Latin"},
    "pt-BR": {"population": 185876600, "script": "Latin"},
    "nb-NO": {"population": 5207690, "script": "Latin"},
    "gu-IN": {"population": 35047600, "script": "Gujarati"},
    "ga-IE": {"population": 538154, "script": "Latin"},
    "es-CL": {"population": 17158134, "script": "Latin"},
    "ilo": {"population": 9695808, "script": "Latin"},
    "el": {"population": 12233270, "script": "Greek"},
    "eo": {"population": 100000, "script": "Latin"},
    "en": {"population": 1522575906, "script": "Latin"},
    "ee": {"population": 4179930, "script": "Latin"},
    "eu": {"population": 1049442, "script": "Latin"},
    "et": {"population": 904473, "script": "Latin"},
    "es": {"population": 454306855, "script": "Latin"},
    "ru": {"population": 184764822, "script": "Cyrillic"},
    "rm": {"population": 40609, "script": "Latin"},
    "ro": {"population": 22511832, "script": "Latin"},
    "dsb": {"population": 7034, "script": "Latin"},
    "hsb": {"population": 12937, "script": "Latin"},
    "be": {"population": 10182116, "script": "Cyrillic"},
    "bg": {"population": 8107349, "script": "Cyrillic"},
    "uk": {"population": 29629582, "script": "Cyrillic"},
    "ast": {"population": 625899, "script": "Latin"},
    "wo": {"population": 9793131, "script": "Latin"},
    "bm": {"population": 7799530, "script": "Latin"},
    "br": {"population": 552397, "script": "Latin"},
    "bs": {"population": 3828389, "script": "Latin"},
    "ja": {"population": 121002946, "script": "Japanese"},
    "hy-AM": {"population": 2995252, "script": "Armenian"},
    "pt-PT": {"population": 10392288, "script": "Latin"},
    "es-AR": {"population": 43431900, "script": "Latin"},
    "ach": {"population": 1372763, "script": "Latin"},
    "oc": {"population": 1996614, "script": "Latin"},
    "nn-NO": {"population": 1301923, "script": "Latin"},
    "ltg": {"population": 176817, "script": "Latin"},
    "fy-NL": {"population": 728760, "script": "Latin"},
    "or": {"population": 40054400, "script": "Odia"},
    "xh": {"population": 9680890, "script": "Latin"},
    "nso": {"population": 5045506, "script": "Latin"},
    "ta-LK": {"population": 3308025, "script": "Tamil"},
    "ca": {"population": 8363274, "script": "Latin"},
    "son": {"population": 4000000, "script": "Latin"},
    "cy": {"population": 522144, "script": "Latin"},
    "cs": {"population": 10431904, "script": "Latin"},
    "lt": {"population": 2488708, "script": "Latin"},
    "hi-IN": {"population": 35047600, "script": "Devanagari"},
    "ak": {"population": 10267764, "script": "Latin"},
    "pl": {"population": 38546852, "script": "Latin"},
    "hr": {"population": 5728917, "script": "Latin"},
    "en-US": {"population": 308514240, "script": "Latin"},
    "ht": {"population": 8189100, "script": "Latin"},
    "hu": {"population": 12548563, "script": "Latin"},
    "ha": {"population": 31230847, "script": "Latin"},
    "he": {"direction": "rtl", "population": 8049310, "script": "Hebrew"},
    "mg": {"population": 21431430, "script": "Latin"},
    "fur": {"population": 37113, "script": "Latin"},
    "uz": {"population": 25292728, "script": "Latin"},
    "ml": {"population": 40596390, "script": "Malayalam"},
    "mn": {"population": 2785543, "script": "Cyrillic"},
    "mk": {"population": 1590981, "script": "Cyrillic"},
    "ur": {"direction": "rtl", "population": 251786371, "script": "Arabic"},
    "cak": {"population": 450000, "script": "Latin"},
    "zh-CN": {"population": 1230741000, "script": "Simplified Chinese"},
    "zh-HK": {"population": 6784055, "script": "Traditional Chinese"},
    "zh-TW": {"population": 22244345, "script": "Traditional Chinese"},
    "en-ZA": {"population": 16639436, "script": "Latin"},
    "ms": {"population": 24079347, "script": "Latin"},
    "mr": {"population": 87619000, "script": "Devanagari"},
    "my": {"population": 36399740, "script": "Myanmar"},
    "af": {"population": 8642954, "script": "Latin"},
    "vi": {"population": 82239460, "script": "Latin"},
    "is": {"population": 331918, "script": "Latin"},
    "it": {"population": 69025171, "script": "Latin"},
    "an": {"population": 54000, "script": "Latin"},
    "as": {"population": 16272100, "script": "Bengali"},
    "ar": {"direction": "rtl", "population": 304854166, "script": "Arabic"},
    "sv-SE": {"population": 9311539, "script": "Latin"},
    "az": {"population": 9292560, "script": "Latin"},
    "es-ES": {"population": 47664639, "script": "Latin"},
    "id": {"population": 164141222, "script": "Latin"},
    "ig": {"population": 23603060, "script": "Latin"},
    "sr": {"population": 7617631, "script": "Cyrillic"},
    "nl": {"population": 31184917, "script": "Latin"},
    "lij": {"population": 531954, "script": "Latin"},
    "csb": {"population": 50131, "script": "Latin"},
    "zu": {"population": 13313524, "script": "Latin"},
    "kab": {"population": 3084292, "script": "Latin"},
    "fr": {"population": 231632800, "script": "Latin"},
    "fa": {"direction": "rtl", "population": 79732772, "script": "Arabic"},
    "ff": {"population": 7057393, "script": "Latin"},
    "mai": {"population": 18491043, "script": "Devanagari"},
    "fi": {"population": 5381031, "script": "Latin"},
    "ka": {"population": 4343425, "script": "Georgian"},
    "kk": {"population": 11621179, "script": "Cyrillic"},
    "sq": {"population": 6715994, "script": "Latin"},
    "sw": {"population": 143997344, "script": "Latin"},
    "kn": {"population": 46312900, "script": "Kannada"},
    "km": {"population": 13980832, "script": "Khmer"},
    "es-MX": {"population": 101041710, "script": "Latin"},
    "sk": {"population": 4972417, "script": "Latin"},
    "si": {"population": 14996380, "script": "Sinhalese"},
    "ku": {"population": 6456289, "script": "Latin"},
    "sl": {"population": 1867732, "script": "Latin"},
    "am": {"population": 37572806, "script": "Ethiopic"},
}

MIGRATION_0098_TERMINOLOGY_LOCALES = {
    "af": "af-za",
    "am": "am-et",
    "ar": "ar-sa",
    "as": "as-in",
    "az": "az-latn-az",
    "be": "be-by",
    "bg": "bg-bg",
    "bn": "bn-bd",
    "bn-BD": "bn-bd",
    "bn-IN": "bn-in",
    "bs": "bs-latn-ba",
    "ca": "ca-es",
    "cs": "cs-cz",
    "cy": "cy-gb",
    "da": "da-dk",
    "de": "de-de",
    "el": "el-gr",
    "en": "en-us",
    "en-GB": "en-gb",
    "en-US": "en-us",
    "en-ZA": "en-za",
    "es": "es-es",
    "es-AR": "es-ar",
    "es-CL": "es-cl",
    "es-ES": "es-es",
    "es-MX": "es-mx",
    "et": "et-ee",
    "eu": "eu-es",
    "fa": "fa-ir",
    "fi": "fi-fi",
    "fr": "fr-fr",
    "ga-IE": "ga-ie",
    "gd": "gd-gb",
    "gl": "gl-es",
    "gu-IN": "gu-in",
    "ha": "ha-latn-ng",
    "he": "he-il",
    "hi-IN": "hi-in",
    "hr": "hr-hr",
    "hu": "hu-hu",
    "hy-AM": "hy-am",
    "id": "id-id",
    "ig": "ig-ng",
    "is": "is-is",
    "it": "it-it",
    "ja": "ja-jp",
    "ka": "ka-ge",
    "kk": "kk-kz",
    "km": "km-kh",
    "kn": "kn-in",
    "ko": "ko-kr",
    "ku": "ku-arab-iq",
    "lo": "lo-la",
    "lt": "lt-lt",
    "lv": "lv-lv",
    "mk": "mk-mk",
    "ml": "ml-in",
    "mn": "mn-mn",
    "mr": "mr-in",
    "ms": "ms-my",
    "my": "my-mm",
    "nb-NO": "nb-no",
    "ne-NP": "ne-np",
    "nl": "nl-nl",
    "nn-NO": "nn-no",
    "or": "or-in",
    "pa-IN": "pa-in",
    "pl": "pl-pl",
    "pt-BR": "pt-br",
    "pt-PT": "pt-pt",
    "ro": "ro-ro",
    "ru": "ru-ru",
    "ses": "",
    "si": "si-lk",
    "sk": "sk-sk",
    "sl": "sl-si",
    "son": "",
    "sq": "sq-al",
    "sr": "sr-cyrl-rs",
    "sv-SE": "sv-se",
    "sw": "sw-ke",
    "ta": "ta-in",
    "te": "te-in",
    "tg": "tg-cyrl-tj",
    "th": "th-th",
    "tl": "tl-ph",
    "tr": "tr-tr",
    "uk": "uk-ua",
    "ur": "ur-pk",
    "uz": "uz-latn-uz",
    "vi": "vi-vn",
    "wo": "wo-sn",
    "xh": "xh-za",
    "yo": "yo-ng",
    "zh-CN": "zh-cn",
    "zh-HK": "zh-hk",
    "zh-TW": "zh-tw",
    "zu": "zu-za",
}

MIGRATION_0098_TRANSLATOR_LOCALES = {
    "af": "af",
    "ar": "ar",
    "bg": "bg",
    "bs": "bs-Latn",
    "ca": "ca",
    "cs": "cs",
    "cy": "cy",
    "da": "da",
    "de": "de",
    "el": "el",
    "en-GB": "en",
    "es": "es",
    "es-AR": "es",
    "es-CL": "es",
    "es-ES": "es",
    "es-MX": "es",
    "et": "et",
    "fa": "fa",
    "fi": "fi",
    "fr": "fr",
    "he": "he",
    "hi-IN": "hi",
    "hr": "hr",
    "ht": "ht",
    "hu": "hu",
    "id": "id",
    "it": "it",
    "ja": "ja",
    "ko": "ko",
    "lt": "lt",
    "lv": "lv",
    "ms": "ms",
    "nl": "nl",
    "no": "nb-NO",
    "pl": "pl",
    "pt": "pt-BR",
    "pt": "pt-PT",
    "ro": "ro",
    "ru": "ru",
    "sk": "sk",
    "sl": "sl",
    "sr-Cyrl": "sr",
    "sv": "sv-SE",
    "sw": "sw",
    "th": "th",
    "tr": "tr",
    "uk": "uk",
    "ur": "ur",
    "vi": "vi",
    "zh-CN": "zh-CHS",
    "zh-HK": "zh-CHT",
    "zh-TW": "zh-CHT",
}

MIGRATION_0134_PONTOON_TO_GOOGLE_TRANSLATE_MAP = [
    ("af", "af"),
    ("am", "am"),
    ("ar", "ar"),
    ("az", "az"),
    ("be", "be"),
    ("bg", "bg"),
    ("bn", "bn"),
    ("bn-BD", "bn"),
    ("bn-IN", "bn"),
    ("bs", "bs"),
    ("ca", "ca"),
    ("cs", "cs"),
    ("cy", "cy"),
    ("da", "da"),
    ("de", "de"),
    ("el", "el"),
    ("en", "en"),
    ("en-CA", "en"),
    ("en-GB", "en"),
    ("en-US", "en"),
    ("en-ZA", "en"),
    ("eo", "eo"),
    ("es", "es"),
    ("es-AR", "es"),
    ("es-CL", "es"),
    ("es-ES", "es"),
    ("es-MX", "es"),
    ("et", "et"),
    ("eu", "eu"),
    ("fa", "fa"),
    ("fi", "fi"),
    ("fr", "fr"),
    ("fy-NL", "fy"),
    ("ga-IE", "ga"),
    ("gd", "gd"),
    ("gl", "gl"),
    ("gu-IN", "gu"),
    ("ha", "ha"),
    ("he", "iw"),
    ("hi-IN", "hi"),
    ("hr", "hr"),
    ("ht", "ht"),
    ("hu", "hu"),
    ("hy-AM", "hy"),
    ("id", "id"),
    ("ig", "ig"),
    ("is", "is"),
    ("it", "it"),
    ("ja", "ja"),
    ("jv", "jw"),
    ("ka", "ka"),
    ("kk", "kk"),
    ("km", "km"),
    ("kn", "kn"),
    ("ko", "ko"),
    ("ku", "ku"),
    ("ky", "ky"),
    ("lb", "lb"),
    ("lo", "lo"),
    ("lt", "lt"),
    ("lv", "lv"),
    ("mg", "mg"),
    ("mk", "mk"),
    ("ml", "ml"),
    ("mn", "mn"),
    ("mr", "mr"),
    ("ms", "ms"),
    ("my", "my"),
    ("nb-NO", "no"),
    ("ne-NP", "ne"),
    ("nl", "nl"),
    ("ny", "ny"),
    ("pa-IN", "pa"),
    ("pl", "pl"),
    ("pt-BR", "pt"),
    ("pt-PT", "pt"),
    ("ro", "ro"),
    ("ru", "ru"),
    ("si", "si"),
    ("sk", "sk"),
    ("sl", "sl"),
    ("sn", "sn"),
    ("sq", "sq"),
    ("sr", "sr"),
    ("su", "su"),
    ("sv-SE", "sv"),
    ("sw", "sw"),
    ("ta", "ta"),
    ("te", "te"),
    ("tg", "tg"),
    ("th", "th"),
    ("tl", "tl"),
    ("tr", "tr"),
    ("uk", "uk"),
    ("ur", "ur"),
    ("uz", "uz"),
    ("vi", "vi"),
    ("xh", "xh"),
    ("yo", "yo"),
    ("zh-CN", "zh"),
    ("zh-HK", "zh"),
    ("zh-TW", "zh-TW"),
    ("zu", "zu"),
]

MIGRATION_0146_USERS = [
    ("pontoon-tm@mozilla.com", "translation-memory", "Translation Memory"),
    ("pontoon-gt@mozilla.com", "google-translate", "Google Translate"),
]


def migration_0002_load_initial_data(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    for locale_kwargs in MIGRATION_0002_LOCALES:
        Locale.objects.create(**locale_kwargs)
    Project = apps.get_model("base", "Project")
    project = Project.objects.create(
        name="Pontoon Intro",
        slug="pontoon-intro",
        url=settings.SITE_URL + "/intro/",
        links=True,
        repository_type="git",
        repository_url="https://github.com/mozilla/pontoon-intro.git",
        info_brief="This is a demo website, used for demonstration purposes only. You can translate on the website itself by double clicking on page elements. Access to advanced features like translation memory and machine translation is available by clicking on the menu icon in the top-left corner.",
    )


def migration_0038_set_pontoon_intro_locale(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    Project = apps.get_model("base", "Project")
    ProjectLocale = apps.get_model("base", "ProjectLocale")

    locale = Locale.objects.get(code="en-GB")
    pontoon_intro = Project.objects.get(slug="pontoon-intro")
    ProjectLocale.objects.create(project=pontoon_intro, locale=locale)


def migration_0038_unset_pontoon_intro_locale(apps, schema_editor):
    ProjectLocale = apps.get_model("base", "ProjectLocale")
    ProjectLocale.objects.filter(
        project__slug="pontoon_intro", locale__code="en-GB"
    ).delete()


def migration_0008_add_cldr_plurals_to_locales(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    for locale in MIGRATION_0008_LOCALE_CLDR:
        l = Locale.objects.get(code=locale)
        l.cldr_plurals = MIGRATION_0008_LOCALE_CLDR[locale]
        l.save()


def migration_0012_remove_unused_locales(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    Locale.objects.filter(code__in=MIGRATION_0012_UNUSED_LOCALES).delete()


def migration_0013_add_back_source_locales(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    Locale.objects.create(
        code="en",
        name="English",
        nplurals=2,
        plural_rule="(n != 1)",
        cldr_plurals="1,5",
    )
    Locale.objects.create(
        code="en-US",
        name="English",
        nplurals=2,
        plural_rule="(n != 1)",
        cldr_plurals="1,5",
    )


def migration_0016_add_tagalog_locale(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    Locale.objects.create(
        code="tl",
        name="Tagalog",
        nplurals=2,
        plural_rule="(n > 3) && (n%10 == 4 || n%10 == 6 || n%10 == 9)",
        cldr_plurals="1,5",
    )


def migration_0018_change_chinese_plurals(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    Translation = apps.get_model("base", "Translation")
    for locale in Locale.objects.filter(name="Chinese"):
        locale.nplurals = 1
        locale.plural_rule = "0"
        locale.cldr_plurals = "5"
        locale.save()
        Translation.objects.filter(locale=locale, plural_form=1).delete()


def migration_0020_complete_plurals(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    for locale in MIGRATION_0020_LOCALES:
        l = Locale.objects.get(code=locale["code"])
        l.plural_rule = locale["plural_rule"]
        l.nplurals = locale["nplurals"]
        l.cldr_plurals = locale["cldr_plurals"]
        l.save()
    for pa in Locale.objects.filter(code__startswith="pa"):
        pa.name = "Punjabi"
        pa.save()


def migration_0021_remove_pa_fy(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    for code in ["pa", "fy"]:
        l = Locale.objects.get(code=code)
        l.delete()


def migration_0026_copy_repo_attributes_to_relation(apps, schema_editor):
    """
    Copy data in Project.repository_* attributes to Repository
    instances.
    """
    Project = apps.get_model("base", "Project")
    Repository = apps.get_model("base", "Repository")
    for project in Project.objects.all():
        repo = Repository(
            project=project, type=project.repository_type, url=project.repository_url,
        )
        repo.save()


def migration_0026_copy_relation_to_repo_attributes(apps, schema_editor):
    """
    Copy data in Repository instances to Project.repository_*
    attributes.
    """
    Project = apps.get_model("base", "Project")
    for project in Project.objects.all():
        repo = project.repository_set.first()
        if repo is not None:
            project.repository_type = repo.type
            project.repository_url = repo.url
            project.save()


def migration_0041_create_locale_permissions(apps, schema_editor):
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    locale_content_type, _ = ContentType.objects.get_or_create(
        app_label="base", model="locale"
    )
    Permission.objects.get_or_create(
        codename="can_translate_locale",
        content_type=locale_content_type,
        name="Can add translations",
    )
    Permission.objects.get_or_create(
        codename="can_manage_locale",
        content_type=locale_content_type,
        name="Can manage locale",
    )


def migration_0043_create_locale_groups(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    Permission = apps.get_model("auth", "Permission")
    Locale = apps.get_model("base", "Locale")
    ContentType = apps.get_model("contenttypes", "ContentType")
    GroupObjectPermission = apps.get_model("guardian", "GroupObjectPermission")
    locale_content_type = ContentType.objects.get(app_label="base", model="locale")
    can_translate = Permission.objects.get(
        content_type=locale_content_type, codename="can_translate_locale"
    )
    can_manage = Permission.objects.get(
        content_type=locale_content_type, codename="can_manage_locale"
    )
    for locale in Locale.objects.all():
        translators_group = Group.objects.create(
            name="{} translators".format(locale.code)
        )
        translators_group.permissions.add(can_translate)
        GroupObjectPermission.objects.create(
            object_pk=locale.pk,
            content_type=locale_content_type,
            group=translators_group,
            permission=can_translate,
        )
        managers_group = Group.objects.create(name="{} managers".format(locale.code))
        managers_group.permissions.add(can_translate)
        GroupObjectPermission.objects.create(
            object_pk=locale.pk,
            content_type=locale_content_type,
            group=managers_group,
            permission=can_translate,
        )
        managers_group.permissions.add(can_manage)
        GroupObjectPermission.objects.create(
            object_pk=locale.pk,
            content_type=locale_content_type,
            group=managers_group,
            permission=can_manage,
        )
        locale.translators_group = translators_group
        locale.managers_group = managers_group
        locale.save()


def migration_0043_remove_locale_groups(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    Group = apps.get_model("auth", "Group")
    Locale.objects.update(translators_group=None)
    Locale.objects.update(managers_group=None)
    Group.objects.all().delete()


def migration_0044_create_translators(apps, schema_editor):
    """
    Bug 952488 - We're assigning translation permissions to active contributors.
    """
    User = apps.get_model("auth", "User")
    users = getattr(User, "translators", getattr(User, "objects", None))
    contributors_locale = (
        users.filter(
            translation__approved=True, user_permissions__codename="can_localize"
        )
        .annotate(translated_locales=models.Count("translation__locale", distinct=True))
        .filter(translated_locales=1)
    )
    for contributor in contributors_locale:
        contributor.groups.add(
            contributor.translation_set.first().locale.translators_group
        )


def migration_0044_remove_translators(apps, schema_editor):
    User = apps.get_model("auth", "User")
    Locale = apps.get_model("base", "Locale")
    UserGroup = User.groups.through
    UserGroup.objects.filter(
        group__in=Locale.objects.values_list("translators_group__pk", flat=True)
    ).delete()
    UserGroup.objects.filter(
        group__in=Locale.objects.values_list("managers_group__pk", flat=True)
    ).delete()


def migration_0073_create_project_locale_permission(apps, schema_editor):
    """Create permissions for project/locale translators."""
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    project_locale_content_type, _ = ContentType.objects.get_or_create(
        app_label="base", model="projectlocale"
    )
    Permission.objects.get_or_create(
        codename="can_translate_project_locale",
        content_type=project_locale_content_type,
        name="Can translate a locale of project",
    )


def migration_0075_create_project_locale_groups(apps, schema_editor):
    """Create translators groups for every project locale object."""
    Group = apps.get_model("auth", "Group")
    Permission = apps.get_model("auth", "Permission")
    ProjectLocale = apps.get_model("base", "ProjectLocale")
    ContentType = apps.get_model("contenttypes", "ContentType")
    GroupObjectPermission = apps.get_model("guardian", "GroupObjectPermission")
    project_locale_ct = ContentType.objects.get(app_label="base", model="projectlocale")
    can_translate = Permission.objects.get(
        content_type=project_locale_ct, codename="can_translate_project_locale"
    )
    for project_locale in ProjectLocale.objects.all():
        translators_group = Group.objects.create(
            name="{}/{} translators".format(
                project_locale.project.slug, project_locale.locale.code
            )
        )
        translators_group.permissions.add(can_translate)
        GroupObjectPermission.objects.create(
            object_pk=project_locale.pk,
            content_type=project_locale_ct,
            group=translators_group,
            permission=can_translate,
        )
        project_locale.translators_group = translators_group
        project_locale.save()


def migration_0075_remove_project_locale_groups(apps, schema):
    ProjectLocale = apps.get_model("base", "ProjectLocale")
    for project_locale in ProjectLocale.objects.all():
        project_locale.translators_group.delete()


def migration_0081_add_locale_data(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    locales = Locale.objects.all()
    for l in locales:
        try:
            data = MIGRATION_0081_LOCALES[l.code]
            l.script = data.get("script")
            l.direction = data.get("direction", "ltr")
            l.population = int(round(data.get("population") / 1000)) * 1000
        except KeyError:
            pass
    if locales:
        bulk_update(locales)


def migration_0081_remove_locale_data(apps, schema_editor):
    Locale = apps.get_model("base", "Locale")
    locales = Locale.objects.all()
    for l in locales:
        l.script = "Latin"
        l.direction = "ltr"
        l.population = 0
    if locales:
        bulk_update(locales)


def migration_0089_create_pm_groups(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    group, created = Group.objects.get_or_create(name="project_managers")
    if created:
        project_content_type, _ = ContentType.objects.get_or_create(
            app_label="base", model="project"
        )
        can_manage_project, _ = Permission.objects.get_or_create(
            content_type=project_content_type, codename="can_manage_project"
        )
        group.permissions.add(can_manage_project)


def migration_0089_remove_pm_groups(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    Group.objects.get(name="project_managers").delete()


def migration_0095_load_initial_data(apps, schema_editor):
    Project = apps.get_model("base", "Project")
    repository = Project.objects.get(slug="pontoon-intro").repositories.first()
    if not repository.permalink_prefix:
        repository.permalink_prefix = "https://raw.githubusercontent.com/mozilla/pontoon-intro/master/static/locales/{locale_code}"
        repository.save()


def migration_0098_migrate_locales(apps, schema_editor):
    """
    Add alternative locale codes for our integrations with Microsoft products.
    """
    Locale = apps.get_model("base", "Locale")
    locale_map = {l.code: l for l in Locale.objects.all()}
    for pontoon_code, ms_code in filter(
        lambda x: x[1], MIGRATION_0098_TRANSLATOR_LOCALES.items()
    ):
        if pontoon_code in locale_map:
            locale_map[pontoon_code].ms_translator_code = ms_code
    for pontoon_code, ms_code in filter(
        lambda x: x[1], MIGRATION_0098_TERMINOLOGY_LOCALES.items()
    ):
        if pontoon_code in locale_map:
            locale_map[pontoon_code].ms_terminology_code = ms_code
    bulk_update(
        list(locale_map.values()),
        update_fields=["ms_translator_code", "ms_terminology_code"],
    )


def migration_0103_rename_groups_with_duplicate_words(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    for name in ("managers", "translators"):
        double = "{} {}".format(name, name)
        Group.objects.filter(name__contains=double).update(
            name=models.Func(
                models.F("name"),
                models.Value(double),
                models.Value(name),
                function="replace",
            )
        )


def migration_0128_add_to_system_projects(apps, schema_editor):
    Project = apps.get_model("base", "Project")
    try:
        project = Project.objects.get(slug="pontoon-intro")
    except Project.DoesNotExist:
        return
    project.system_project = True
    project.save()
    ProjectLocale = apps.get_model("base", "ProjectLocale")
    for locale in project.locales.all():
        project_locale = ProjectLocale.objects.get(project=project, locale=locale)
        locale.total_strings = models.F("total_strings") - project_locale.total_strings
        locale.approved_strings = (
            models.F("approved_strings") - project_locale.approved_strings
        )
        locale.fuzzy_strings = models.F("fuzzy_strings") - project_locale.fuzzy_strings
        locale.unreviewed_strings = (
            models.F("unreviewed_strings") - project_locale.unreviewed_strings
        )
        locale.save(
            update_fields=[
                "total_strings",
                "approved_strings",
                "fuzzy_strings",
                "unreviewed_strings",
            ]
        )


def migration_0128_remove_from_system_projects(apps, schema_editor):
    Project = apps.get_model("base", "Project")
    try:
        project = Project.objects.get(slug="pontoon-intro")
    except Project.DoesNotExist:
        return
    project.system_project = False
    project.save()
    ProjectLocale = apps.get_model("base", "ProjectLocale")
    for locale in project.locales.all():
        project_locale = ProjectLocale.objects.get(project=project, locale=locale)
        locale.total_strings = models.F("total_strings") + project_locale.total_strings
        locale.approved_strings = (
            models.F("approved_strings") + project_locale.approved_strings
        )
        locale.fuzzy_strings = models.F("fuzzy_strings") + project_locale.fuzzy_strings
        locale.unreviewed_strings = (
            models.F("unreviewed_strings") + project_locale.unreviewed_strings
        )
        locale.save(
            update_fields=[
                "total_strings",
                "approved_strings",
                "fuzzy_strings",
                "unreviewed_strings",
            ]
        )


MIGRATIONS_0129_ENTITY_DOCUMENT_UPDATE_TRIGGER_DROP_SQL = """
    DROP TRIGGER base_translation_entity_document_update ON "base_translation";
    DROP FUNCTION base_translation_entity_document_update();
"""


def migration_0129_drop_entity_document(apps, schema):
    with connection.cursor() as cursor:
        try:
            cursor.execute(MIGRATIONS_0129_ENTITY_DOCUMENT_UPDATE_TRIGGER_DROP_SQL)
        except ProgrammingError:
            pass


def migration_0134_populate_google_translate_code(apps, schema_editor):
    """
    Add alternative locale codes for our integration with Google Cloud Translation API.
    """
    Locale = apps.get_model("base", "Locale")
    locale_map = {l.code: l for l in Locale.objects.all()}
    for (
        pontoon_code,
        google_translate_code,
    ) in MIGRATION_0134_PONTOON_TO_GOOGLE_TRANSLATE_MAP:
        if pontoon_code in locale_map:
            locale_map[pontoon_code].google_translate_code = google_translate_code
    bulk_update(list(locale_map.values()), update_fields=["google_translate_code"])


def migration_0146_add_pretranslation_users(apps, schema_editor):
    User = apps.get_model("auth", "User")
    UserProfile = apps.get_model("base", "UserProfile")
    users = User.objects.bulk_create(
        [
            User(email=email, username=username, first_name=name)
            for email, username, name in MIGRATION_0146_USERS
        ]
    )
    UserProfile.objects.bulk_create([UserProfile(user=user) for user in users])


def migration_0146_remove_pretranslation_users(apps, schema_editor):
    User = apps.get_model("auth", "User")
    UserProfile = apps.get_model("base", "UserProfile")
    users = User.objects.filter(email__in=[u[0] for u in MIGRATION_0146_USERS])
    user_profiles = UserProfile.objects.filter(user__in=users)
    user_profiles.delete()
    users.delete()


def migration_0153_add_word_count(apps, schema_editor):
    Entity = apps.get_model("base", "Entity")
    entities = []

    for e in Entity.objects.all():
        e.word_count = get_word_count(e.string)
        entities.append(e)
    bulk_update(entities, update_fields=["word_count"], batch_size=1000)


def migration_0153_reset_word_count(apps, schema_editor):
    Entity = apps.get_model("base", "Entity")
    Entity.objects.all().update(word_count=0)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0007_alter_validators_add_error_messages"),
        ("auth", "0006_require_contenttypes_0002"),
        ("guardian", "__first__"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Entity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("string", models.TextField()),
                ("string_plural", models.TextField(blank=True)),
                ("key", models.TextField(blank=True)),
                ("comment", models.TextField(blank=True)),
                ("order", models.PositiveIntegerField(default=0)),
                ("source", models.TextField(blank=True)),
                ("obsolete", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Locale",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=20, unique=True)),
                ("name", models.CharField(max_length=128)),
                ("nplurals", models.SmallIntegerField(blank=True, null=True)),
                ("plural_rule", models.CharField(blank=True, max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=128, unique=True)),
                ("slug", models.SlugField(unique=True)),
                (
                    "repository_type",
                    models.CharField(
                        choices=[
                            (b"file", b"File"),
                            (b"git", b"Git"),
                            (b"hg", b"HG"),
                            (b"svn", b"SVN"),
                            (b"transifex", b"Transifex"),
                        ],
                        default=b"File",
                        max_length=20,
                        verbose_name=b"Type",
                    ),
                ),
                (
                    "repository_url",
                    models.CharField(blank=True, max_length=2000, verbose_name=b"URL"),
                ),
                ("repository_path", models.TextField(blank=True)),
                (
                    "transifex_project",
                    models.CharField(
                        blank=True, max_length=128, verbose_name=b"Project"
                    ),
                ),
                (
                    "transifex_resource",
                    models.CharField(
                        blank=True, max_length=128, verbose_name=b"Resource"
                    ),
                ),
                (
                    "info_brief",
                    models.TextField(blank=True, verbose_name=b"Project info"),
                ),
                ("url", models.URLField(blank=True, verbose_name=b"URL")),
                (
                    "width",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        verbose_name=b"Default website (iframe) width in pixels. If set,         sidebar will be opened by default.",
                    ),
                ),
                (
                    "links",
                    models.BooleanField(
                        verbose_name=b"Keep links on the project website clickable"
                    ),
                ),
                ("disabled", models.BooleanField(default=False)),
                ("locales", models.ManyToManyField(to="base.Locale")),
            ],
            options={
                "permissions": (
                    ("can_manage", "Can manage projects"),
                    ("can_localize", "Can localize projects"),
                ),
            },
        ),
        migrations.CreateModel(
            name="Resource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.TextField()),
                ("entity_count", models.PositiveIntegerField(default=0)),
                (
                    "format",
                    models.CharField(
                        blank=True,
                        choices=[
                            (b"po", b"po"),
                            (b"properties", b"properties"),
                            (b"dtd", b"dtd"),
                            (b"ini", b"ini"),
                            (b"lang", b"lang"),
                        ],
                        max_length=20,
                        verbose_name=b"Format",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Project"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TranslatedResource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("translated_count", models.PositiveIntegerField(default=0)),
                ("approved_count", models.PositiveIntegerField(default=0)),
                ("fuzzy_count", models.PositiveIntegerField(default=0)),
                (
                    "locale",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Locale"
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Resource"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Subpage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                ("url", models.URLField(blank=True, verbose_name=b"URL")),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Project"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Translation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("string", models.TextField()),
                ("plural_form", models.SmallIntegerField(blank=True, null=True)),
                ("date", models.DateTimeField()),
                ("approved", models.BooleanField(default=False)),
                ("approved_date", models.DateTimeField(blank=True, null=True)),
                ("fuzzy", models.BooleanField(default=False)),
                (
                    "approved_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approvers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "entity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Entity"
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Locale"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("transifex_username", models.CharField(blank=True, max_length=40)),
                ("transifex_password", models.CharField(blank=True, max_length=128)),
                ("svn_username", models.CharField(blank=True, max_length=40)),
                ("svn_password", models.CharField(blank=True, max_length=128)),
                ("quality_checks", models.BooleanField(default=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="entity",
            name="resource",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.Resource"
            ),
        ),
        migrations.RunPython(code=migration_0002_load_initial_data,),
        migrations.AlterField(
            model_name="userprofile",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="profile",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="resource",
            name="format",
            field=models.CharField(
                blank=True,
                choices=[
                    (b"po", b"po"),
                    (b"xliff", b"xliff"),
                    (b"properties", b"properties"),
                    (b"dtd", b"dtd"),
                    (b"ini", b"ini"),
                    (b"lang", b"lang"),
                ],
                max_length=20,
                verbose_name=b"Format",
            ),
        ),
        migrations.AddField(
            model_name="subpage",
            name="resources",
            field=models.ManyToManyField(blank=True, to="base.Resource"),
        ),
        migrations.AlterField(
            model_name="translation",
            name="date",
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name="resource",
            name="format",
            field=models.CharField(
                blank=True,
                choices=[
                    (b"po", b"po"),
                    (b"xliff", b"xliff"),
                    (b"properties", b"properties"),
                    (b"dtd", b"dtd"),
                    (b"inc", b"inc"),
                    (b"ini", b"ini"),
                    (b"lang", b"lang"),
                ],
                max_length=20,
                verbose_name=b"Format",
            ),
        ),
        migrations.AddField(
            model_name="locale",
            name="cldr_plurals",
            field=models.CommaSeparatedIntegerField(
                blank=True,
                max_length=11,
                validators=[pontoon.base.models.validate_cldr],
                verbose_name=b"CLDR Plurals",
            ),
        ),
        migrations.AlterField(
            model_name="resource",
            name="format",
            field=models.CharField(
                blank=True,
                choices=[
                    (b"po", b"po"),
                    (b"xliff", b"xliff"),
                    (b"properties", b"properties"),
                    (b"dtd", b"dtd"),
                    (b"inc", b"inc"),
                    (b"ini", b"ini"),
                    (b"lang", b"lang"),
                    (b"l20n", b"l20n"),
                ],
                max_length=20,
                verbose_name=b"Format",
            ),
        ),
        migrations.AlterField(
            model_name="translation",
            name="date",
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.RunPython(code=migration_0008_add_cldr_plurals_to_locales,),
        migrations.AddField(
            model_name="project",
            name="last_synced",
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name="translation",
            name="deleted",
            field=models.DateTimeField(default=None, null=True),
        ),
        migrations.AddField(
            model_name="translation",
            name="extra",
            field=jsonfield.fields.JSONField(default=pontoon.base.models.extra_default),
        ),
        migrations.AlterModelOptions(name="locale", options={"ordering": ["name"]},),
        migrations.RunPython(code=migration_0012_remove_unused_locales,),
        migrations.RunPython(code=migration_0013_add_back_source_locales,),
        migrations.CreateModel(
            name="ChangedEntityLocale",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Entity"
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Locale"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="entity",
            name="changed_locales",
            field=models.ManyToManyField(
                help_text=b"List of locales in which translations for this entity have changed since the last sync.",
                through="base.ChangedEntityLocale",
                to="base.Locale",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="changedentitylocale", unique_together=set([("entity", "locale")]),
        ),
        migrations.RemoveField(model_name="project", name="last_synced",),
        migrations.RunPython(code=migration_0016_add_tagalog_locale,),
        migrations.AlterField(
            model_name="entity",
            name="source",
            field=jsonfield.fields.JSONField(blank=True, default=list),
        ),
        migrations.RunPython(code=migration_0018_change_chinese_plurals,),
        migrations.AlterModelOptions(
            name="locale", options={"ordering": ["name", "code"]},
        ),
        migrations.RunPython(code=migration_0020_complete_plurals,),
        migrations.RunPython(code=migration_0021_remove_pa_fy,),
        migrations.RemoveField(model_name="locale", name="nplurals",),
        migrations.AlterField(
            model_name="translation",
            name="date",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="locale",
            name="team_description",
            field=models.TextField(blank=True),
        ),
        migrations.CreateModel(
            name="Repository",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            (b"file", b"File"),
                            (b"git", b"Git"),
                            (b"hg", b"HG"),
                            (b"svn", b"SVN"),
                            (b"transifex", b"Transifex"),
                        ],
                        default=b"file",
                        max_length=255,
                    ),
                ),
                (
                    "url",
                    models.CharField(blank=True, max_length=2000, verbose_name=b"URL"),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Project"
                    ),
                ),
            ],
            options={"ordering": ["id"],},
        ),
        migrations.AlterUniqueTogether(
            name="repository", unique_together=set([("project", "url")]),
        ),
        migrations.RunPython(
            migration_0026_copy_repo_attributes_to_relation,
            migration_0026_copy_relation_to_repo_attributes,
        ),
        migrations.RemoveField(model_name="project", name="repository_path",),
        migrations.RemoveField(model_name="project", name="repository_type",),
        migrations.RemoveField(model_name="project", name="repository_url",),
        migrations.AlterField(
            model_name="repository",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="repositories",
                to="base.Project",
            ),
        ),
        migrations.AddField(
            model_name="repository",
            name="source_repo",
            field=models.BooleanField(
                default=False,
                help_text=b'\n        If true, this repo contains the source strings directly in the\n        root of the repo. Checkouts of this repo will have "templates"\n        appended to the end of their path so that they are detected as\n        source directories.\n    ',
            ),
        ),
        migrations.AddField(
            model_name="changedentitylocale",
            name="when",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="repository",
            name="last_synced_revisions",
            field=jsonfield.fields.JSONField(blank=True, default=dict),
        ),
        migrations.RemoveField(model_name="translation", name="deleted",),
        migrations.AddField(
            model_name="project",
            name="has_changed",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="entity",
            name="resource",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="entities",
                to="base.Resource",
            ),
        ),
        migrations.AlterField(
            model_name="resource",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="resources",
                to="base.Project",
            ),
        ),
        migrations.CreateModel(
            name="ProjectLocale",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "latest_translation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="base.Translation",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="locale",
            name="latest_translation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="base.Translation",
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="latest_translation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="base.Translation",
            ),
        ),
        migrations.AddField(
            model_name="translatedresource",
            name="latest_translation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="base.Translation",
            ),
        ),
        migrations.AddField(
            model_name="projectlocale",
            name="locale",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.Locale"
            ),
        ),
        migrations.AddField(
            model_name="projectlocale",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.Project"
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="locales",
            field=models.ManyToManyField(
                through="base.ProjectLocale", to="base.Locale"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="projectlocale", unique_together=set([("project", "locale")]),
        ),
        migrations.AlterModelOptions(
            name="locale",
            options={
                "ordering": ["name", "code"],
                "permissions": (
                    ("can_translate_locale", "Can add translations"),
                    ("can_manage_locale", "Can manage locale"),
                ),
            },
        ),
        migrations.RunPython(
            code=migration_0038_set_pontoon_intro_locale,
            reverse_code=migration_0038_unset_pontoon_intro_locale,
        ),
        migrations.RunPython(
            code=migration_0041_create_locale_permissions,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AddField(
            model_name="Locale",
            name="translators_group",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="translated_locales",
                to="auth.Group",
            ),
        ),
        migrations.AddField(
            model_name="Locale",
            name="managers_group",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="managed_locales",
                to="auth.Group",
            ),
        ),
        migrations.RunPython(
            code=migration_0043_create_locale_groups,
            reverse_code=migration_0043_remove_locale_groups,
        ),
        migrations.RunPython(
            code=migration_0044_create_translators,
            reverse_code=migration_0044_remove_translators,
        ),
        migrations.AlterModelOptions(
            name="project",
            options={"permissions": (("can_manage", "Can manage projects"),)},
        ),
        migrations.RemoveField(model_name="userprofile", name="svn_password",),
        migrations.RemoveField(model_name="userprofile", name="svn_username",),
        migrations.RemoveField(model_name="userprofile", name="transifex_password",),
        migrations.RemoveField(model_name="userprofile", name="transifex_username",),
        migrations.AddField(
            model_name="userprofile",
            name="force_suggestions",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="repository",
            name="permalink_prefix",
            field=models.CharField(
                blank=True, max_length=2000, verbose_name=b"Permalink prefix"
            ),
        ),
        migrations.CreateModel(
            name="TranslationMemoryEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("source", models.TextField()),
                ("target", models.TextField()),
                (
                    "entity",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="base.Entity",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.Locale"
                    ),
                ),
                (
                    "translation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="memory_entries",
                        to="base.Translation",
                    ),
                ),
            ],
        ),
        django.contrib.postgres.operations.CreateExtension(name="fuzzystrmatch",),
        migrations.RunSQL(
            sql="CREATE INDEX source_length_idx ON base_translationmemoryentry(CHAR_LENGTH(source))",
            reverse_sql="DROP INDEX source_length_idx",
        ),
        migrations.AddField(
            model_name="resource",
            name="deadline",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="resource",
            name="priority",
            field=models.IntegerField(
                choices=[
                    (1, b"Lowest"),
                    (2, b"Low"),
                    (3, b"Normal"),
                    (4, b"High"),
                    (5, b"Highest"),
                ],
                default=3,
            ),
        ),
        migrations.AlterField(
            model_name="projectlocale",
            name="locale",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="project_locale",
                to="base.Locale",
            ),
        ),
        migrations.AlterField(
            model_name="projectlocale",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="project_locale",
                to="base.Project",
            ),
        ),
        migrations.AlterField(
            model_name="projectlocale",
            name="locale",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="project_locale",
                to="base.Locale",
            ),
        ),
        migrations.AlterField(
            model_name="projectlocale",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="project_locale",
                to="base.Project",
            ),
        ),
        migrations.AlterField(
            model_name="translatedresource",
            name="locale",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stats",
                to="base.Locale",
            ),
        ),
        migrations.AlterField(
            model_name="translatedresource",
            name="resource",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stats",
                to="base.Resource",
            ),
        ),
        migrations.AddField(
            model_name="locale",
            name="approved_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="locale",
            name="fuzzy_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="locale",
            name="total_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="locale",
            name="translated_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="project",
            name="approved_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="project",
            name="fuzzy_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="project",
            name="total_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="project",
            name="translated_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="projectlocale",
            name="approved_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="projectlocale",
            name="fuzzy_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="projectlocale",
            name="total_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="projectlocale",
            name="translated_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.RemoveField(model_name="project", name="transifex_project",),
        migrations.RemoveField(model_name="project", name="transifex_resource",),
        migrations.AlterField(
            model_name="project",
            name="links",
            field=models.BooleanField(
                default=False,
                verbose_name=b"Keep links on the project website clickable",
            ),
        ),
        migrations.RenameField(
            model_name="resource", old_name="entity_count", new_name="total_strings",
        ),
        migrations.RenameField(
            model_name="translatedresource",
            old_name="approved_count",
            new_name="approved_strings",
        ),
        migrations.RenameField(
            model_name="translatedresource",
            old_name="fuzzy_count",
            new_name="fuzzy_strings",
        ),
        migrations.RenameField(
            model_name="translatedresource",
            old_name="translated_count",
            new_name="translated_strings",
        ),
        migrations.AlterField(
            model_name="translatedresource",
            name="locale",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="translatedresources",
                to="base.Locale",
            ),
        ),
        migrations.AlterField(
            model_name="translatedresource",
            name="resource",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="translatedresources",
                to="base.Resource",
            ),
        ),
        migrations.AddField(
            model_name="translatedresource",
            name="total_strings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name="repository",
            name="type",
            field=models.CharField(
                choices=[
                    (b"file", b"File"),
                    (b"git", b"Git"),
                    (b"hg", b"HG"),
                    (b"svn", b"SVN"),
                ],
                default=b"file",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="repository",
            name="type",
            field=models.CharField(
                choices=[(b"git", b"Git"), (b"hg", b"HG"), (b"svn", b"SVN")],
                default=b"git",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="resource",
            name="format",
            field=models.CharField(
                blank=True,
                choices=[
                    (b"po", b"po"),
                    (b"xliff", b"xliff"),
                    (b"properties", b"properties"),
                    (b"dtd", b"dtd"),
                    (b"inc", b"inc"),
                    (b"ini", b"ini"),
                    (b"lang", b"lang"),
                    (b"l20n", b"l20n"),
                    (b"ftl", b"ftl"),
                ],
                max_length=20,
                verbose_name=b"Format",
            ),
        ),
        migrations.RemoveField(model_name="project", name="has_changed",),
        migrations.AddField(
            model_name="userprofile",
            name="locales_order",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.PositiveIntegerField(),
                blank=True,
                default=list,
                size=None,
            ),
        ),
        migrations.AddField(
            model_name="translation",
            name="unapproved_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="translation",
            name="unapproved_user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="unapproved_translations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="cldr_plurals",
            field=models.CommaSeparatedIntegerField(
                blank=True,
                help_text=b'\n        A comma separated list of <a href="http://www.unicode.org/cldr/charts/dev/supplemental/language_plural_rules.html">CLDR plural rules</a>,\n        where 0 represents zero, 1 one, 2 two, 3 few, 4 many, and 5 other.\n        E.g. 1,5\n        ',
                max_length=11,
                validators=[pontoon.base.models.validate_cldr],
                verbose_name=b"CLDR Plurals",
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="plural_rule",
            field=models.CharField(
                blank=True,
                help_text=b'\n        Plural rule is part of the plurals header in\n        <a href="https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms">Gettext PO files</a>,\n        that follows the <i>plural=</i> string, without the trailing semicolon.\n        E.g. (n != 1)\n        ',
                max_length=128,
            ),
        ),
        migrations.AlterField(
            model_name="translation",
            name="approved_user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="approved_translations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="width",
            field=models.PositiveIntegerField(
                blank=True,
                help_text=b"\n        Default website (iframe) width in pixels.\n        If set, sidebar will be opened by default.\n    ",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="repository",
            name="permalink_prefix",
            field=models.CharField(
                help_text=b"\n        A URL prefix for downloading localized files. For GitHub repositories,\n        select any localized file on GitHub, click Raw and replace locale code\n        and the following bits in the URL with `{locale_code}`.\n    ",
                max_length=2000,
                verbose_name=b"Download prefix",
            ),
        ),
        migrations.AlterField(
            model_name="repository",
            name="url",
            field=models.CharField(max_length=2000, verbose_name=b"URL"),
        ),
        migrations.AddField(
            model_name="project",
            name="langpack_url",
            field=models.URLField(
                blank=True,
                help_text=b"\n        URL pattern for downloading language packs. Leave empty if language packs\n        not available for the project. Supports {locale_code} wildcard.\n    ",
                null=True,
                verbose_name=b"Language pack URL",
            ),
        ),
        migrations.AlterField(
            model_name="resource",
            name="format",
            field=models.CharField(
                blank=True,
                choices=[
                    (b"po", b"po"),
                    (b"xliff", b"xliff"),
                    (b"xlf", b"xliff"),
                    (b"properties", b"properties"),
                    (b"dtd", b"dtd"),
                    (b"inc", b"inc"),
                    (b"ini", b"ini"),
                    (b"lang", b"lang"),
                    (b"ftl", b"ftl"),
                ],
                max_length=20,
                verbose_name=b"Format",
            ),
        ),
        migrations.AlterModelOptions(
            name="projectlocale",
            options={
                "permissions": (
                    ("can_translate_project_locale", "Can add translations"),
                )
            },
        ),
        migrations.RunPython(
            code=migration_0073_create_project_locale_permission,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="projectlocale",
            name="translators_group",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="translated_project_locales",
                to="auth.Group",
            ),
        ),
        migrations.RunPython(
            code=migration_0075_create_project_locale_groups,
            reverse_code=migration_0075_remove_project_locale_groups,
        ),
        migrations.AddField(
            model_name="projectlocale",
            name="has_custom_translators",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="projectlocale",
            name="translators_group",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="projectlocales",
                to="auth.Group",
            ),
        ),
        migrations.AddField(
            model_name="repository",
            name="branch",
            field=models.CharField(blank=True, max_length=2000, verbose_name=b"Branch"),
        ),
        migrations.AlterField(
            model_name="locale",
            name="cldr_plurals",
            field=models.CharField(
                blank=True,
                help_text=b'\n        A comma separated list of <a href="http://www.unicode.org/cldr/charts/dev/supplemental/language_plural_rules.html">CLDR plural rules</a>,\n        where 0 represents zero, 1 one, 2 two, 3 few, 4 many, and 5 other.\n        E.g. 1,5\n        ',
                max_length=11,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^\\d+(?:\\,\\d+)*\\Z", 32),
                        code="invalid",
                        message="Enter only digits separated by commas.",
                    ),
                    pontoon.base.models.validate_cldr,
                ],
                verbose_name=b"CLDR Plurals",
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="cldr_plurals",
            field=models.CharField(
                blank=True,
                help_text=b'\n        A comma separated list of <a href="http://www.unicode.org/cldr/charts/dev/supplemental/language_plural_rules.html">CLDR plural rules</a>,\n        where 0 represents zero, 1 one, 2 two, 3 few, 4 many, and 5 other.\n        E.g. 1,5\n        ',
                max_length=11,
                validators=[pontoon.base.models.validate_cldr],
                verbose_name=b"CLDR Plurals",
            ),
        ),
        migrations.AddField(
            model_name="locale",
            name="direction",
            field=models.CharField(
                choices=[("ltr", "left-to-right"), ("rtl", "right-to-left")],
                default="ltr",
                max_length=3,
            ),
        ),
        migrations.AddField(
            model_name="locale",
            name="population",
            field=models.PositiveIntegerField(
                default=0, help_text=b"\n        Number of native speakers.\n    "
            ),
        ),
        migrations.AddField(
            model_name="locale",
            name="script",
            field=models.CharField(default=b"Latin", max_length=128),
        ),
        migrations.AddField(
            model_name="project",
            name="deadline",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="project",
            name="priority",
            field=models.IntegerField(
                choices=[
                    (1, b"Lowest"),
                    (2, b"Low"),
                    (3, b"Normal"),
                    (4, b"High"),
                    (5, b"Highest"),
                ],
                default=3,
            ),
        ),
        migrations.RunPython(
            code=migration_0081_add_locale_data,
            reverse_code=migration_0081_remove_locale_data,
        ),
        migrations.AddField(
            model_name="repository",
            name="website",
            field=models.URLField(
                blank=True, max_length=2000, verbose_name=b"Public Repository Website"
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="priority",
            field=models.IntegerField(
                choices=[
                    (1, b"Lowest"),
                    (2, b"Low"),
                    (3, b"Normal"),
                    (4, b"High"),
                    (5, b"Highest"),
                ],
                default=1,
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="direction",
            field=models.CharField(
                choices=[(b"ltr", b"left-to-right"), (b"rtl", b"right-to-left")],
                default=b"ltr",
                help_text=b'\n        Writing direction. Set to "right-to-left" if "rtl" value for the locale\n        script is set to "YES" in\n        <a href="https://github.com/unicode-cldr/cldr-core/blob/master/scriptMetadata.json">CLDR scriptMetadata.json</a>.\n        ',
                max_length=3,
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="population",
            field=models.PositiveIntegerField(
                default=0,
                help_text=b'\n        Number of native speakers. Find locale code in\n        <a href="https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/territoryInfo.json">CLDR territoryInfo.json</a>\n        and multiply its "_populationPercent" with the territory "_population".\n        Repeat if multiple occurrences of locale code exist and sum products.\n        ',
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="script",
            field=models.CharField(
                default=b"Latin",
                help_text=b'\n        Script locale is written in. Find it in\n        <a href="https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/languageData.json">CLDR languageData.json</a>.\n        ',
                max_length=128,
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="direction",
            field=models.CharField(
                choices=[(b"ltr", b"left-to-right"), (b"rtl", b"right-to-left")],
                default=b"ltr",
                help_text=b'\n        Writing direction of the script. Set to "right-to-left" if "rtl" value\n        for the locale script is set to "YES" in\n        <a href="https://github.com/unicode-cldr/cldr-core/blob/master/scriptMetadata.json">CLDR scriptMetadata.json</a>.\n        ',
                max_length=3,
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="script",
            field=models.CharField(
                default=b"Latin",
                help_text=b'\n        The script used by this locale. Find it in\n        <a href="http://www.unicode.org/cldr/charts/latest/supplemental/languages_and_scripts.html">CLDR Languages and Scripts</a>.\n        ',
                max_length=128,
            ),
        ),
        migrations.RenameField(
            model_name="project", old_name="info_brief", new_name="info",
        ),
        migrations.AddField(
            model_name="project",
            name="can_be_requested",
            field=models.BooleanField(
                default=True,
                help_text=b"\n        Allow localizers to request the project for their team.\n    ",
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="contact",
            field=models.ForeignKey(
                blank=True,
                help_text=b"\n        L10n driver in charge of the project.\n    ",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="contact_for",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="preview_url",
            field=models.URLField(
                blank=True,
                help_text=b"\n        URL to translation preview environment, e.g. staging website,\n        screenshots, development build, etc.\n    ",
                verbose_name=b"L10n Preview URL",
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="project_url",
            field=models.URLField(
                blank=True,
                help_text=b"\n        URL to released project, e.g. production website or product download.\n    ",
                verbose_name=b"Project URL",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="disabled",
            field=models.BooleanField(
                default=False,
                help_text=b"\n        Hide project from the UI and only keep it accessible from the admin.\n        Disable the project instead of deleting it to keep translation memory\n        and attributions.\n    ",
            ),
        ),
        migrations.CreateModel(
            name="ExternalResource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32)),
                ("url", models.URLField(blank=True, verbose_name=b"URL")),
                (
                    "locale",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.Locale",
                    ),
                ),
            ],
        ),
        migrations.AlterModelOptions(
            name="project",
            options={"permissions": (("can_manage_project", "Can manage project"),)},
        ),
        migrations.RemoveField(model_name="project", name="preview_url",),
        migrations.RemoveField(model_name="project", name="project_url",),
        migrations.AddField(
            model_name="project",
            name="admin_notes",
            field=models.TextField(
                blank=True,
                help_text=b"\n        Notes only visible in Administration\n    ",
            ),
        ),
        migrations.AddField(
            model_name="externalresource",
            name="project",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="base.Project",
            ),
        ),
        migrations.RunPython(
            code=migration_0089_create_pm_groups,
            reverse_code=migration_0089_remove_pm_groups,
        ),
        migrations.AddField(
            model_name="entity",
            name="date_created",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        django.contrib.postgres.operations.CreateExtension(name="btree_gin",),
        django.contrib.postgres.operations.TrigramExtension(),
        migrations.AddField(
            model_name="translation",
            name="entity_document",
            field=models.TextField(blank=True),
        ),
        migrations.RunSQL(
            sql="\n    UPDATE base_translation AS t \n      SET entity_document = (e.key || ' ' || e.string || ' ' || e.string_plural || ' ' || e.comment)\n      FROM base_entity AS e\n      WHERE t.entity_id=e.id;\n",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql="\n    CREATE FUNCTION base_translation_entity_document_update() RETURNS TRIGGER AS $$\n        BEGIN\n          NEW.entity_document = (\n            SELECT (e.key || ' ' || e.string || ' ' || e.string_plural || ' ' || e.comment) as document\n            FROM base_entity as e\n            WHERE id=NEW.entity_id\n          );\n        RETURN NEW;\n    END;\n    $$ LANGUAGE 'plpgsql';\n    CREATE TRIGGER base_translation_entity_document_update BEFORE INSERT OR UPDATE ON \"base_translation\"\n    FOR EACH ROW EXECUTE PROCEDURE base_translation_entity_document_update()\n",
            reverse_sql='\n    DROP TRIGGER base_translation_entity_document_update ON "base_translation";\n    DROP FUNCTION base_translation_entity_document_update();\n',
        ),
        pontoon.db.migrations.MultiFieldTRGMIndex(
            table="base_translation",
            from_fields=["entity_document", "string"],
            field="entity_document",
        ),
        migrations.AddField(
            model_name="locale",
            name="db_collation",
            field=models.CharField(
                blank=True,
                help_text=b"\n        Some of locales require to use different database collation than default ('en_US').\n\n        <strong>Use with caution, because it may brake the search for this locale.</strong>\n        ",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="translationmemoryentry",
            name="project",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="memory_entries",
                to="base.Project",
            ),
        ),
        migrations.AlterField(
            model_name="translationmemoryentry",
            name="entity",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="memory_entries",
                to="base.Entity",
            ),
        ),
        migrations.RunSQL(
            sql="\n            WITH t AS (SELECT tme.id as tme_id, p.id as project_id FROM base_translationmemoryentry tme JOIN base_entity e ON (\n              tme.entity_id=e.id\n            ) JOIN base_resource r ON (\n              e.resource_id=r.id\n            ) JOIN base_project p ON (\n              r.project_id=p.id\n            ))\n            UPDATE base_translationmemoryentry SET project_id=t.project_id FROM t WHERE id=t.tme_id\n            ",
            reverse_sql="\n            UPDATE base_translationmemoryentry SET project_id=NULL WHERE project_id IS NOT NULL\n            ",
        ),
        migrations.AlterIndexTogether(
            name="entity",
            index_together=set([("resource", "obsolete", "string_plural")]),
        ),
        migrations.AlterIndexTogether(
            name="translation",
            index_together=set(
                [("entity", "locale", "fuzzy"), ("entity", "locale", "approved")]
            ),
        ),
        migrations.RunPython(
            code=migration_0095_load_initial_data,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="translation",
            name="rejected",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="translation",
            name="rejected_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="translation",
            name="rejected_user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="rejected_translations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="translation",
            name="unrejected_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="translation",
            name="unrejected_user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="unrejected_translations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RunSQL(
            sql="\n    UPDATE base_translation\n    SET rejected = TRUE\n    WHERE approved = FALSE\n    AND fuzzy = FALSE\n    AND date < (\n        SELECT GREATEST(bt.date, bt.approved_date)\n        FROM base_translation bt\n        WHERE bt.approved = TRUE\n        AND bt.entity_id = base_translation.entity_id\n        AND bt.locale_id = base_translation.locale_id\n        AND (\n            bt.plural_form IS NULL OR\n            bt.plural_form = base_translation.plural_form\n        )\n    );\n",
            reverse_sql="\n    UPDATE base_translation\n    SET rejected = FALSE\n    WHERE rejected = TRUE;\n",
        ),
        migrations.AddField(
            model_name="locale",
            name="ms_terminology_code",
            field=models.CharField(
                blank=True,
                help_text="\n        Microsoft Terminology uses language codes that include both the language and\n        the country/region. Chose a matching locale from the list or leave blank to disable support\n        for Microsoft terminology:\n\n        af-za, am-et, ar-dz, ar-eg, ar-sa, as-in, az-latn-az, be-by, bg-bg, bn-bd, bn-in,\n        bs-cyrl-ba, bs-latn-ba, ca-es, ca-es-valencia, chr-cher-us, cs-cz, cy-gb, da-dk, de-at,\n        de-ch, de-de, el-gr, en-au, en-ca, en-gb, en-hk, en-ie, en-in, en-my, en-ng, en-nz, en-ph,\n        en-pk, en-sg, en-tt, en-us, en-za, es-ar, es-bo, es-cl, es-co, es-cr, es-do, es-ec, es-es,\n        es-gt, es-hn, es-mx, es-ni, es-pa, es-pe, es-pr, es-py, es-sv, es-us, es-uy, es-ve, et-ee,\n        eu-es, fa-ir, fi-fi, fil-ph, fo-fo, fr-be, fr-ca, fr-ch, fr-dz, fr-fr, fr-ma, fr-tn,\n        fuc-latn-sn, ga-ie, gd-gb, gl-es, gu-in, guc-ve, ha-latn-ng, he-il, hi-in, hr-hr, hu-hu,\n        hy-am, id-id, ig-ng, is-is, it-ch, it-it, iu-latn-ca, ja-jp, ka-ge, kk-kz, km-kh, kn-in,\n        ko-kr, kok-in, ku-arab-iq, ky-kg, lb-lu, lo-la, lt-lt, lv-lv, mi-nz, mk-mk, ml-in, mn-mn,\n        mr-in, ms-bn, ms-my, mt-mt, my-mm, nb-no, ne-np, nl-be, nl-nl, nn-no, nso-za, or-in,\n        pa-arab-pk, pa-in, pl-pl, prs-af, ps-af, pt-br, pt-pt, quc-latn-gt, quz-pe, ro-md, ro-ro,\n        ru-kz, ru-ru, rw-rw, sd-arab-pk, si-lk, sk-sk, sl-si, sp-xl, sq-al, sr-cyrl-ba, sr-cyrl-rs,\n        sr-latn-me, sr-latn-rs, sv-se, sw-ke, ta-in, te-in, tg-cyrl-tj, th-th, ti-et, tk-tm, tl-ph,\n        tn-za, tr-tr, tt-ru, ug-cn, uk-ua, ur-pk, uz-cyrl-uz, uz-latn-uz, vi-vn, wo-sn, xh-za,\n        yo-ng, zh-cn, zh-hk, zh-sg, zh-tw, zu-za\n        ",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="locale",
            name="ms_translator_code",
            field=models.CharField(
                blank=True,
                help_text='\n        Microsoft Translator maintains its own list of\n        <a href="https://msdn.microsoft.com/en-us/library/hh456380.aspx">supported locales</a>.\n        Choose a locale from that list that\'s is the closest match or leave it blank to disable\n        support for Microsoft Translator.\n        ',
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="plural_rule",
            field=models.CharField(
                blank=True,
                help_text='\n        Plural rule is part of the plurals header in\n        <a href="https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms">\n        Gettext PO files\n        </a>,\n        that follows the <i>plural=</i> string, without the trailing semicolon.\n        E.g. (n != 1)\n        ',
                max_length=128,
            ),
        ),
        migrations.RunPython(
            code=migration_0098_migrate_locales,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="userprofile",
            name="custom_homepage",
            field=models.CharField(blank=True, max_length=10, null=True),
        ),
        migrations.RunSQL(
            sql="\n            WITH cte AS (\n              SELECT au.id, au.email, bt.locale_id, count(bt.locale_id) as contributions_count, row_number()\n              OVER(PARTITION BY au.id ORDER BY count(bt.locale_id) DESC) AS rn\n              FROM auth_user au LEFT JOIN base_translation bt ON(bt.user_id=au.id)\n              GROUP BY au.id, bt.locale_id\n            )\n            UPDATE base_userprofile bu SET custom_homepage = (\n              SELECT code FROM base_locale WHERE id=cte.locale_id\n            )\n            FROM cte\n            WHERE cte.rn=1 and cte.contributions_count > 0 and bu.user_id=cte.id;\n            ",
            reverse_sql="",
        ),
        migrations.AddField(
            model_name="locale",
            name="transvision",
            field=models.BooleanField(
                default=False,
                help_text='\n        Enable Machinery suggestions from <a href="https://transvision.mozfr.org/">Transvision</a>.\n        Only useful for locales that don\'t translate all projects on Pontoon.\n    ',
            ),
        ),
        migrations.RunPython(
            code=migration_0103_rename_groups_with_duplicate_words,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="locale",
            name="cldr_plurals",
            field=models.CharField(
                blank=True,
                help_text='\n        A comma separated list of\n        <a href="http://www.unicode.org/cldr/charts/dev/supplemental/language_plural_rules.html">\n        CLDR plural rules</a>, where 0 represents zero, 1 one, 2 two, 3 few, 4 many, and 5 other.\n        E.g. 1,5\n        ',
                max_length=11,
                validators=[pontoon.base.models.validate_cldr],
                verbose_name="CLDR Plurals",
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="direction",
            field=models.CharField(
                choices=[("ltr", "left-to-right"), ("rtl", "right-to-left")],
                default="ltr",
                help_text='\n        Writing direction of the script. Set to "right-to-left" if "rtl" value\n        for the locale script is set to "YES" in\n        <a href="https://github.com/unicode-cldr/cldr-core/blob/master/scriptMetadata.json">\n        CLDR scriptMetadata.json</a>.\n        ',
                max_length=3,
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="population",
            field=models.PositiveIntegerField(
                default=0,
                help_text='\n        Number of native speakers. Find locale code in CLDR territoryInfo.json:\n        https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/territoryInfo.json\n        and multiply its "_populationPercent" with the territory "_population".\n        Repeat if multiple occurrences of locale code exist and sum products.\n        ',
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="script",
            field=models.CharField(
                default="Latin",
                help_text='\n        The script used by this locale. Find it in\n        <a\n        href="http://www.unicode.org/cldr/charts/latest/supplemental/languages_and_scripts.html">\n        CLDR Languages and Scripts</a>.\n        ',
                max_length=128,
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="data_source",
            field=models.CharField(
                choices=[("repository", "Repository"), ("database", "Database")],
                default="repository",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="latest_translation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="locale_latest",
                to="base.Translation",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="latest_translation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="project_latest",
                to="base.Translation",
            ),
        ),
        migrations.AlterField(
            model_name="projectlocale",
            name="latest_translation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="project_locale_latest",
                to="base.Translation",
            ),
        ),
        migrations.AlterField(
            model_name="translatedresource",
            name="latest_translation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="resource_latest",
                to="base.Translation",
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="tags_enabled",
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name="PermissionChangelog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[("added", "Added"), ("removed", "Removed")],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="auth.Group"
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="changed_permissions_log",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "performed_on",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permisions_log",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("pk",),
                "verbose_name": "User permissions log",
                "verbose_name_plural": "Users permissions logs",
            },
        ),
        migrations.AlterIndexTogether(
            name="translation",
            index_together=set(
                [
                    ("locale", "user", "entity"),
                    ("entity", "locale", "approved"),
                    ("date", "locale"),
                    ("entity", "locale", "fuzzy"),
                    ("entity", "user", "approved", "fuzzy"),
                ]
            ),
        ),
        migrations.RenameField(
            model_name="translatedresource",
            old_name="translated_strings",
            new_name="unreviewed_strings",
        ),
        migrations.AlterUniqueTogether(
            name="translatedresource", unique_together=set([("locale", "resource")]),
        ),
        migrations.AlterField(
            model_name="resource",
            name="format",
            field=models.CharField(
                blank=True,
                choices=[
                    ("dtd", "dtd"),
                    ("ftl", "ftl"),
                    ("inc", "inc"),
                    ("ini", "ini"),
                    ("json", "json"),
                    ("lang", "lang"),
                    ("po", "po"),
                    ("properties", "properties"),
                    ("xlf", "xliff"),
                    ("xliff", "xliff"),
                ],
                max_length=20,
                verbose_name="Format",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="resource", unique_together=set([("project", "path")]),
        ),
        migrations.AlterField(
            model_name="locale",
            name="plural_rule",
            field=models.CharField(
                blank=True,
                help_text='\n        Plural rule is part of the plurals header in\n        <a href="https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms">\n        Gettext PO files\n        </a>,\n        that follows the <i>plural=</i> string, without the trailing semicolon.\n        E.g. (n != 1)\n        ',
                max_length=512,
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="sync_disabled",
            field=models.BooleanField(
                default=False,
                help_text="\n        Prevent project from syncing with VCS.\n    ",
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="ms_translator_code",
            field=models.CharField(
                blank=True,
                help_text='\n        Microsoft Translator maintains its own list of\n        <a href="https://docs.microsoft.com/en-us/azure/cognitive-services/translator/languages">\n        supported locales</a>. Choose a locale from that list that\'s is the closest match or leave\n        it blank to disable support for Microsoft Translator.\n        ',
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="disabled",
            field=models.BooleanField(
                default=False,
                help_text="\n        Hide project from the UI and only keep it accessible from the admin.\n        Disable the project instead of deleting it to keep translation memory\n        and attributions. Also prevents project from syncing with VCS.\n    ",
            ),
        ),
        migrations.RenameField(
            model_name="locale",
            old_name="translated_strings",
            new_name="unreviewed_strings",
        ),
        migrations.RenameField(
            model_name="project",
            old_name="translated_strings",
            new_name="unreviewed_strings",
        ),
        migrations.RenameField(
            model_name="projectlocale",
            old_name="translated_strings",
            new_name="unreviewed_strings",
        ),
        migrations.AddField(
            model_name="entity",
            name="date_obsoleted",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="projectlocale",
            name="readonly",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="userprofile",
            name="tour_status",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="project",
            name="system_project",
            field=models.BooleanField(
                default=False,
                help_text="\n        System projects are built into Pontoon. They are accessible from the\n        translate view, but hidden from dashboards.\n    ",
            ),
        ),
        migrations.RunPython(
            code=migration_0128_add_to_system_projects,
            reverse_code=migration_0128_remove_from_system_projects,
        ),
        migrations.RemoveField(model_name="translation", name="entity_document",),
        migrations.AddField(
            model_name="translation",
            name="active",
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(
            code=migration_0129_drop_entity_document,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddIndex(
            model_name="translation",
            index=partial_index.PartialIndex(
                fields=["entity", "locale", "plural_form", "active"],
                name="base_transl_entity__fbea1e_partial",
                unique=True,
                where=partial_index.PQ(active=True),
            ),
        ),
        migrations.AddIndex(
            model_name="translation",
            index=partial_index.PartialIndex(
                fields=["entity", "locale", "active"],
                name="base_transl_entity__ed9592_partial",
                unique=True,
                where=partial_index.PQ(("active", True), ("plural_form__isnull", True)),
            ),
        ),
        migrations.AddField(
            model_name="locale",
            name="strings_with_errors",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="locale",
            name="strings_with_warnings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="project",
            name="strings_with_errors",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="project",
            name="strings_with_warnings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="projectlocale",
            name="strings_with_errors",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="projectlocale",
            name="strings_with_warnings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="translatedresource",
            name="strings_with_errors",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="translatedresource",
            name="strings_with_warnings",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="locale",
            name="google_translate_code",
            field=models.CharField(
                blank=True,
                help_text='\n        Google Translate maintains its own list of\n        <a href="https://translate.google.com/intl/en/about/languages/">\n        supported locales</a>. Choose a matching locale from the list or leave blank to disable\n        support for Google Cloud Translation machine translation service.\n        ',
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="ms_terminology_code",
            field=models.CharField(
                blank=True,
                help_text="\n        Microsoft Terminology uses language codes that include both the language and\n        the country/region. Choose a matching locale from the list or leave blank to disable support\n        for Microsoft terminology:\n\n        af-za, am-et, ar-dz, ar-eg, ar-sa, as-in, az-latn-az, be-by, bg-bg, bn-bd, bn-in,\n        bs-cyrl-ba, bs-latn-ba, ca-es, ca-es-valencia, chr-cher-us, cs-cz, cy-gb, da-dk, de-at,\n        de-ch, de-de, el-gr, en-au, en-ca, en-gb, en-hk, en-ie, en-in, en-my, en-ng, en-nz, en-ph,\n        en-pk, en-sg, en-tt, en-us, en-za, es-ar, es-bo, es-cl, es-co, es-cr, es-do, es-ec, es-es,\n        es-gt, es-hn, es-mx, es-ni, es-pa, es-pe, es-pr, es-py, es-sv, es-us, es-uy, es-ve, et-ee,\n        eu-es, fa-ir, fi-fi, fil-ph, fo-fo, fr-be, fr-ca, fr-ch, fr-dz, fr-fr, fr-ma, fr-tn,\n        fuc-latn-sn, ga-ie, gd-gb, gl-es, gu-in, guc-ve, ha-latn-ng, he-il, hi-in, hr-hr, hu-hu,\n        hy-am, id-id, ig-ng, is-is, it-ch, it-it, iu-latn-ca, ja-jp, ka-ge, kk-kz, km-kh, kn-in,\n        ko-kr, kok-in, ku-arab-iq, ky-kg, lb-lu, lo-la, lt-lt, lv-lv, mi-nz, mk-mk, ml-in, mn-mn,\n        mr-in, ms-bn, ms-my, mt-mt, my-mm, nb-no, ne-np, nl-be, nl-nl, nn-no, nso-za, or-in,\n        pa-arab-pk, pa-in, pl-pl, prs-af, ps-af, pt-br, pt-pt, quc-latn-gt, quz-pe, ro-md, ro-ro,\n        ru-kz, ru-ru, rw-rw, sd-arab-pk, si-lk, sk-sk, sl-si, sp-xl, sq-al, sr-cyrl-ba, sr-cyrl-rs,\n        sr-latn-me, sr-latn-rs, sv-se, sw-ke, ta-in, te-in, tg-cyrl-tj, th-th, ti-et, tk-tm, tl-ph,\n        tn-za, tr-tr, tt-ru, ug-cn, uk-ua, ur-pk, uz-cyrl-uz, uz-latn-uz, vi-vn, wo-sn, xh-za,\n        yo-ng, zh-cn, zh-hk, zh-sg, zh-tw, zu-za\n        ",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="locale",
            name="ms_translator_code",
            field=models.CharField(
                blank=True,
                help_text='\n        Microsoft Translator maintains its own list of\n        <a href="https://docs.microsoft.com/en-us/azure/cognitive-services/translator/languages">\n        supported locales</a>. Choose a matching locale from the list or leave blank to disable\n        support for Microsoft Translator machine translation service.\n        ',
                max_length=20,
            ),
        ),
        migrations.RunPython(
            code=migration_0134_populate_google_translate_code,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="project",
            name="configuration_file",
            field=models.CharField(
                blank=True,
                help_text="\n        A path to the optional project configuration file, relative to the\n        source string repository.\n        ",
                max_length=2000,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="resource",
            name="format",
            field=models.CharField(
                blank=True,
                choices=[
                    ("dtd", "dtd"),
                    ("ftl", "ftl"),
                    ("inc", "inc"),
                    ("ini", "ini"),
                    ("json", "json"),
                    ("lang", "lang"),
                    ("po", "po"),
                    ("properties", "properties"),
                    ("xlf", "xliff"),
                    ("xliff", "xliff"),
                    ("xml", "xml"),
                ],
                max_length=20,
                verbose_name="Format",
            ),
        ),
        migrations.RunSQL(
            sql="CREATE INDEX tm_locale_source_length_idx ON base_translationmemoryentry(locale_id, length(source))",
            reverse_sql="DROP INDEX tm_locale_source_length_idx",
        ),
        migrations.RemoveField(model_name="resource", name="priority",),
        migrations.AddField(
            model_name="project",
            name="date_created",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="project",
            name="date_disabled",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="resource",
            name="date_created",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="resource",
            name="date_obsoleted",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="resource",
            name="obsolete",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="project",
            name="pretranslation_enabled",
            field=models.BooleanField(
                default=False,
                help_text="\n        Pretranslate project strings using automated sources\n        like translation memory and machine translation.\n        ",
            ),
        ),
        migrations.RunPython(
            code=migration_0146_add_pretranslation_users,
            reverse_code=migration_0146_remove_pretranslation_users,
        ),
        migrations.AddField(
            model_name="entity",
            name="group_comment",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="entity",
            name="resource_comment",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="userprofile",
            name="preferred_source_locale",
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name="userprofile",
            name="custom_homepage",
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                ("content", models.TextField()),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "translation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="base.Translation",
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="entity",
            name="changed_locales",
            field=models.ManyToManyField(
                help_text="List of locales in which translations for this entity have changed since the last sync.",
                through="base.ChangedEntityLocale",
                to="base.Locale",
            ),
        ),
        migrations.AlterField(
            model_name="externalresource",
            name="url",
            field=models.URLField(blank=True, verbose_name="URL"),
        ),
        migrations.AlterField(
            model_name="locale",
            name="db_collation",
            field=models.CharField(
                blank=True,
                help_text="\n        Some of locales require to use different database collation than default ('en_US').\n\n        <strong>Use with caution, because it may brake the search for this locale.</strong>\n        ",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="admin_notes",
            field=models.TextField(
                blank=True,
                help_text="\n        Notes only visible in Administration\n    ",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="can_be_requested",
            field=models.BooleanField(
                default=True,
                help_text="\n        Allow localizers to request the project for their team.\n    ",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="contact",
            field=models.ForeignKey(
                blank=True,
                help_text="\n        L10n driver in charge of the project\n    ",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="contact_for",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="info",
            field=models.TextField(blank=True, verbose_name="Project info"),
        ),
        migrations.AlterField(
            model_name="project",
            name="langpack_url",
            field=models.URLField(
                blank=True,
                help_text="\n        URL pattern for downloading language packs. Leave empty if language packs\n        not available for the project. Supports {locale_code} wildcard.\n    ",
                null=True,
                verbose_name="Language pack URL",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="links",
            field=models.BooleanField(
                default=False,
                verbose_name="Keep links on the project website clickable",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="priority",
            field=models.IntegerField(
                choices=[
                    (1, "Lowest"),
                    (2, "Low"),
                    (3, "Normal"),
                    (4, "High"),
                    (5, "Highest"),
                ],
                default=1,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="url",
            field=models.URLField(blank=True, verbose_name="URL"),
        ),
        migrations.AlterField(
            model_name="project",
            name="width",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="\n        Default website (iframe) width in pixels.\n        If set, sidebar will be opened by default.\n    ",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="repository",
            name="branch",
            field=models.CharField(blank=True, max_length=2000, verbose_name="Branch"),
        ),
        migrations.AlterField(
            model_name="repository",
            name="permalink_prefix",
            field=models.CharField(
                help_text="\n        A URL prefix for downloading localized files. For GitHub repositories,\n        select any localized file on GitHub, click Raw and replace locale code\n        and the following bits in the URL with `{locale_code}`.\n    ",
                max_length=2000,
                verbose_name="Download prefix",
            ),
        ),
        migrations.AlterField(
            model_name="repository",
            name="source_repo",
            field=models.BooleanField(
                default=False,
                help_text='\n        If true, this repo contains the source strings directly in the\n        root of the repo. Checkouts of this repo will have "templates"\n        appended to the end of their path so that they are detected as\n        source directories.\n    ',
            ),
        ),
        migrations.AlterField(
            model_name="repository",
            name="type",
            field=models.CharField(
                choices=[("git", "Git"), ("hg", "HG"), ("svn", "SVN")],
                default="git",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="repository",
            name="url",
            field=models.CharField(max_length=2000, verbose_name="URL"),
        ),
        migrations.AlterField(
            model_name="repository",
            name="website",
            field=models.URLField(
                blank=True, max_length=2000, verbose_name="Public Repository Website"
            ),
        ),
        migrations.AlterField(
            model_name="subpage",
            name="url",
            field=models.URLField(blank=True, verbose_name="URL"),
        ),
        migrations.AlterField(
            model_name="repository",
            name="permalink_prefix",
            field=models.CharField(
                blank=True,
                help_text="\n        A URL prefix for downloading localized files. For GitHub repositories,\n        select any localized file on GitHub, click Raw and replace locale code\n        and the following bits in the URL with `{locale_code}`.\n    ",
                max_length=2000,
                verbose_name="Download prefix",
            ),
        ),
        migrations.AddField(
            model_name="entity",
            name="word_count",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.RunPython(
            migration_0153_add_word_count, migration_0153_reset_word_count
        ),
        migrations.AddField(
            model_name="comment",
            name="entity",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comments",
                to="base.Entity",
            ),
        ),
        migrations.AddField(
            model_name="comment",
            name="locale",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comments",
                to="base.Locale",
            ),
        ),
        migrations.AlterField(
            model_name="comment",
            name="translation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comments",
                to="base.Translation",
            ),
        ),
    ]
