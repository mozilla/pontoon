# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2018-02-09 14:02
from __future__ import unicode_literals

from collections import Counter
from itertools import dropwhile

from django.db import migrations


def _find_resources_with_dupes(apps):
    # returns a list of resource pks where some entities have dupe order
    Entity = apps.get_model('base', 'Entity')

    entities = Counter(Entity.objects.values_list('resource', 'order').iterator())
    for k, c in dropwhile(lambda v: v[1] > 1, entities.most_common()):
        del entities[k]
    return [x[0] for x in entities.keys()]


def fix_ambiguous_entity_order(apps, schema_editor):
    Entity = apps.get_model('base', 'Entity')

    # get all entities with dupes
    entities = Entity.objects.filter(
        resource_id__in=_find_resources_with_dupes(apps))
    resource = None
    order = 0
    fixed_entities = {}

    # iterates an ordered values list of Entity.resource, pk
    # every time it finds a new resource it resets the ordering to 0
    # collects a dictionary with `order` for keys and a list of entities for
    # values
    for _resource, pk in entities.order_by('resource', 'order').values_list('resource', 'pk').iterator():
        if resource is None:
            resource = _resource
        elif resource != _resource:
            # update on the boundary
            order = 0
            resource = _resource
        else:
            order += 1
        fixed_entities[order] = fixed_entities.get(order, [])
        fixed_entities[order].append(pk)

    # for each `order` set to all entities that require it
    for order, pks in fixed_entities.items():
        Entity.objects.filter(pk__in=pks).update(order=order)


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0115_idx_translation_date_locale'),
    ]

    operations = [
        migrations.RunPython(fix_ambiguous_entity_order)
    ]
