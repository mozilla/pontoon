# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-08-09 13:56
from __future__ import unicode_literals

from django.db import migrations
from django.db.models import F


DEMO_PROJECT_CONTENT = """
Welcome to Pontoon! Let's dive right in: translate this string and press Enter.
Congratulations, you have translated your first string!
Keep translating, we'll show you tips and tricks about Pontoon.
In this sentence, click the special ellipsis at the endâ€¦
Nice! That's been automatically pasted to your translation. We call these "placeables".
Pontoon handles many <b>different</b> %(types)s of placeables.
If a string has a lot of placeables, we have another trick for you.
<strong><a href="%(test)s">Click the Copy button</a> just <em>bellow</em> the translation input.</strong>
The entire string is copied, and you translate in place. Convenient, right?
On to machinery now. For the following sentence, click the Machinery tab.
The quick brown fox jumps over the lazy dog.
Did you see the automatic translation there? If you click a translation in that tab, it gets added to the translation input.
Machinery shows you Machine Translations (MT) and results from our Translation Memory (MT).
That's all for now. There's a lot more to Pontoon that you'll discover as you use it.
Now go on, grasshopper, and translate to your heart's content!
"""


def create_demo_project(apps, schema_editor):
    # Create an empty project
    Project = apps.get_model('base', 'Project')
    project, _ = Project.objects.get_or_create(
        slug='demo',
        name='Demo',
        data_source='database',
        can_be_requested=False,
        sync_disabled=True,
        info=(
            'A demo project, used as a testing playground and for the '
            'guided tour.'
        ),
        admin_notes=(
            'Do not remove, this is required in code to show the guided tour.'
        ),
    )

    # Add a resource
    Resource = apps.get_model('base', 'Resource')
    new_strings = DEMO_PROJECT_CONTENT.strip().split('\n')
    resource, _ = Resource.objects.get_or_create(
        path='playground',
        project=project,
        total_strings=len(new_strings),
    )

    # Add entities
    Entity = apps.get_model('base', 'Entity')
    new_entities = [
        Entity(string=new_string, resource=resource, order=index)
        for index, new_string in enumerate(new_strings)
    ]
    Entity.objects.bulk_create(new_entities)

    # Enable project for all localizable locales
    Locale = apps.get_model('base', 'Locale')
    ProjectLocale = apps.get_model('base', 'ProjectLocale')
    locales = Locale.objects.exclude(code__in=['en-US', 'en'])
    project_locales = [
        ProjectLocale(
            project=project,
            locale=locale,
            total_strings=len(new_strings),
        )
        for locale in locales
    ]
    ProjectLocale.objects.bulk_create(project_locales)

    # Update stats
    TranslatedResource = apps.get_model('base', 'TranslatedResource')
    translated_resources = [
        TranslatedResource(
            resource=resource,
            locale=locale,
            total_strings=len(new_strings),
        )
        for locale in locales
    ]
    TranslatedResource.objects.bulk_create(translated_resources)

    project.total_strings = len(new_strings) * len(locales)
    project.save(update_fields=['total_strings'])

    for locale in locales:
        locale.total_strings = F('total_strings') + len(new_strings)
        locale.save(update_fields=['total_strings'])


def remove_demo_project(apps, schema_editor):
    Project = apps.get_model('base', 'Project')

    try:
        project = Project.objects.get(slug='demo')
    except Project.DoesNotExist:
        return

    # Update Locale stats
    ProjectLocale = apps.get_model('base', 'ProjectLocale')
    for locale in project.locales.all():
        project_locale = ProjectLocale.objects.get(project=project, locale=locale)
        locale.total_strings = F('total_strings') - project_locale.total_strings
        locale.approved_strings = F('approved_strings') - project_locale.approved_strings
        locale.fuzzy_strings = F('fuzzy_strings') - project_locale.fuzzy_strings
        locale.unreviewed_strings = F('unreviewed_strings') - project_locale.unreviewed_strings
        locale.save(update_fields=[
            'total_strings',
            'approved_strings',
            'fuzzy_strings',
            'unreviewed_strings',
        ])

    # Delete Project model and related models in cascade
    project.delete()

class Migration(migrations.Migration):

    dependencies = [
        ('base', '0126_add_tour_status'),
    ]

    operations = [
        migrations.RunPython(create_demo_project, remove_demo_project),
    ]
