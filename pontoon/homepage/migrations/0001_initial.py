# -*- coding: utf-8 -*-
# Generated by Django 1.11.18 on 2019-02-09 13:42
from __future__ import unicode_literals

from django.db import migrations
from django.db.models import F

HOMEPAGE_PROJECT_CONTENT = """
Localize Mozilla
If you want to make Firefox available in your language, join a global community of localizers from all over the world, track progress of various Mozilla localization projects, and more, Pontoon is there for you.
Start Localizing Now
Take a Tour
Learn more
Here's why localizing Mozilla matters.
We are committed to an internet that includes all the peoples of the earth — where a person’s demographic characteristics do not determine their online access, opportunities, or quality of experience.
The Mozilla Localization effort represents a commitment to advancing these aspirations. We work together with people everywhere who share the goal to make the internet an even better place for everyone.
This is how it works.
Pontoon is a simple and intuitive tool that requires little technical skills to use it.
Each language has its own team of localizers.
Join one, find a project you'd like to contribute to, and you're ready to start contributing!
Pick your team and project
Submit a suggestion
Have it approved by a trusted localizer
Show it to your friends as it lands in product
Things which make it special.
From the ground up, Pontoon has been designed as the tool that brings all your team's localization tasks together in one place.
All the functionality and services you need are seamlessly integrated into a single platform.
One more thing.
One of the coolest features of Pontoon is localizing web content in-place, on the web page itself.
The moment you submit a translation, it replaces the original text in the web page, making you the first proofreader and tester.
Talk about context?
Try In-context Localization
Join us.
Now that you know what Pontoon is, come on in!
Want to learn more?
Hack it on Github
Get in touch
"""


def create_homepage_project(apps, schema_editor):
    # Create an empty project
    Project = apps.get_model('base', 'Project')
    project, _ = Project.objects.get_or_create(
        slug='homepage',
        name='Homepage',
        data_source='database',
        can_be_requested=True,
        sync_disabled=True,
        info=(
            'This project is used to make homepage content localizable and '
            'dynamic.'
        ),
        admin_notes=(
            'Do not remove, this is required in code to show the homepage.'
        ),
    )

    # Add a resource
    Resource = apps.get_model('base', 'Resource')
    new_strings = HOMEPAGE_PROJECT_CONTENT.strip().split('\n')
    resource, _ = Resource.objects.get_or_create(
        path='lol', # suggest!
        project=project,
        total_strings=len(new_strings),
    )

    # Add entities
    Entity = apps.get_model('base', 'Entity')
    new_entities = [
        Entity(string=new_string, resource=resource, order=index)
        for index, new_string in enumerate(new_strings)
    ]
    Entity.objects.bulk_create(new_entities)

    # Enable project for all localizable locales
    Locale = apps.get_model('base', 'Locale')
    ProjectLocale = apps.get_model('base', 'ProjectLocale')
    locales = Locale.objects.exclude(code__in=['en-US', 'en'])
    project_locales = [
        ProjectLocale(
            project=project,
            locale=locale,
            total_strings=len(new_strings),
        )
        for locale in locales
    ]
    ProjectLocale.objects.bulk_create(project_locales)

    # Update stats
    TranslatedResource = apps.get_model('base', 'TranslatedResource')
    translated_resources = [
        TranslatedResource(
            resource=resource,
            locale=locale,
            total_strings=len(new_strings),
        )
        for locale in locales
    ]
    TranslatedResource.objects.bulk_create(translated_resources)

    project.total_strings = len(new_strings) * len(locales)
    project.save(update_fields=['total_strings'])

    # Update Locale stats
    for locale in project.locales.all():
        project_locale = ProjectLocale.objects.get(project=project, locale=locale)
        locale.total_strings = F('total_strings') + project_locale.total_strings
        locale.approved_strings = F('approved_strings') + project_locale.approved_strings
        locale.fuzzy_strings = F('fuzzy_strings') + project_locale.fuzzy_strings
        locale.unreviewed_strings = F('unreviewed_strings') + project_locale.unreviewed_strings
        locale.save(update_fields=[
            'total_strings',
            'approved_strings',
            'fuzzy_strings',
            'unreviewed_strings',
        ])


def remove_homepage_project(apps, schema_editor):
    Project = apps.get_model('base', 'Project')

    try:
        project = Project.objects.get(slug='homepage')
    except Project.DoesNotExist:
        return

    # Update Locale stats
    ProjectLocale = apps.get_model('base', 'ProjectLocale')
    for locale in project.locales.all():
        project_locale = ProjectLocale.objects.get(project=project, locale=locale)
        locale.total_strings = F('total_strings') - project_locale.total_strings
        locale.approved_strings = F('approved_strings') - project_locale.approved_strings
        locale.fuzzy_strings = F('fuzzy_strings') - project_locale.fuzzy_strings
        locale.unreviewed_strings = F('unreviewed_strings') - project_locale.unreviewed_strings
        locale.save(update_fields=[
            'total_strings',
            'approved_strings',
            'fuzzy_strings',
            'unreviewed_strings',
        ])

    project.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0140_project_resource_date_fields'),
    ]

    operations = [
        migrations.RunPython(create_homepage_project, remove_homepage_project),
    ]
